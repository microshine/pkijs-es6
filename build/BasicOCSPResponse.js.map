{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":[],"mappings":"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","file":"BasicOCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, getOIDByAlgorithm, getAlgorithmParameters, getCrypto, createECDSASignatureFromCMS, getHashAlgorithm, createCMSECDSASignature } from \"./common\";\r\nimport ResponseData from \"./ResponseData\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Certificate from \"./Certificate\";\r\nimport CertID from \"./CertID\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine\";\r\n//**************************************************************************************\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @description tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @description certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t\t\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t\t\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t\t\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//BasicOCSPResponse       ::= SEQUENCE {\r\n\t\t//    tbsResponseData      ResponseData,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signature            BIT STRING,\r\n\t\t//    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSP_BASIC_RESPONSE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\r\n\t\tconst hashesObject = {};\r\n\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\r\n\t\t\t\tconst certID = new CertID();\r\n\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\tif(response.certStatus instanceof asn1js.Primitive)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(response.certStatus instanceof asn1js.Constructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get hashing algorithm\r\n\t\tif(typeof hashAlgorithm === \"undefined\")\r\n\t\t\thashAlgorithm = \"SHA-1\";\r\n\t\telse\r\n\t\t{\r\n\t\t\t//region Simple check for supported algorithm\r\n\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\tif(oid === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.signatureAlgorithm.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(defParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(this.tbsResponseData.tbs)).then(result => {\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\r\n\t\t//region Global variables (used in \"promises\")\r\n\t\tlet signerCert = null;\r\n\r\n\t\tconst tbsView = new Uint8Array(this.tbsResponseData.tbs);\r\n\r\n\t\tlet certIndex = -1;\r\n\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet shaAlgorithm = \"\";\r\n\r\n\t\tlet trustedCerts = [];\r\n\t\t//endregion\r\n\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Find a correct hashing algorithm\r\n\t\tshaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tlet responderType = 0;\r\n\t\tlet responderId = {};\r\n\r\n\t\tif(this.tbsResponseData.responderID instanceof RelativeDistinguishedNames) // [1] Name\r\n\t\t{\r\n\t\t\tresponderType = 0;\r\n\t\t\tresponderId = this.tbsResponseData.responderID;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.tbsResponseData.responderID instanceof asn1js.OctetString) // [2] KeyHash\r\n\t\t\t{\r\n\t\t\t\tresponderType = 1;\r\n\t\t\t\tresponderId = this.tbsResponseData.responderID;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Compare responderID with all certificates one-by-one\r\n\t\tif(responderType === 0) // By Name\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() => {\r\n\t\t\t\tfor(const [index, certificate] of this.certs.entries())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(certificate.subject.isEqual(responderId))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse  // By KeyHash\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() => Promise.all(Array.from(this.certs, element =>\r\n\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).\r\n\t\t\t\tthen(results => {\r\n\t\t\t\t\tfor(const [index, certificate] of this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], responderId.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\r\n\t\t\tlet isCA = false;\r\n\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\r\n\t\t\treturn Promise.all(Array.from(this.certs, element => checkCA(element))).\r\n\t\t\tthen(promiseResults => {\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn certChain.verify().then(verificationResult => {\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Import public key from responder certificate\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(this.certs[certIndex].signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = this.certs[certIndex].signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = this.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmId;\r\n\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\r\n\t\t\tconst algorithmName = algorithmObject.name;\r\n\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmName, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmName === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tif((this.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n\t\t\t\tconst curveObject = getAlgorithmByOID(this.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${this.certs[certIndex].subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\talgorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst publicKeyInfoSchema = this.certs[certIndex].subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Verifying TBS part of BasicOCSPResponce\r\n\t\tsequence = sequence.then(publicKey => {\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = this.signature.valueBlock.valueHex;\r\n\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\ttbsView);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
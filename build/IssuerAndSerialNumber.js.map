{"version":3,"sources":["../src/IssuerAndSerialNumber.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,qB;;;;;;;;AAQpB,kCACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,MAAL,GAAc,iCAAmB,UAAnB,EAA+B,QAA/B,EAAyC,sBAAsB,aAAtB,CAAoC,QAApC,CAAzC,CAAd;;;;;AAKA,OAAK,YAAL,GAAoB,iCAAmB,UAAnB,EAA+B,cAA/B,EAA+C,sBAAsB,aAAtB,CAAoC,cAApC,CAA/C,CAApB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAqDU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,sBAAsB,MAAtB,CAA6B;AAC5B,WAAO;AACN,aAAQ;AACP,aAAO;AACN,kBAAW;AADL;AADA,MADF;AAMN,mBAAc;AANR;AADqB,IAA7B,CAFY,CAAb;;AAcA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,+EAAV,CAAN;;;;AAID,QAAK,MAAL,GAAc,yCAA+B,EAAE,QAAQ,KAAK,MAAL,CAAY,MAAtB,EAA/B,CAAd;AACA,QAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,YAAhC;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,KAAK,MAAL,CAAY,QAAZ,EADM,EAEN,KAAK,YAFC;AADoB,IAApB,CAAR;;AAOA;;;;;;;;;2BAOD;AACC,UAAO;AACN,YAAQ,KAAK,MAAL,CAAY,MAAZ,EADF;AAEN,kBAAc,KAAK,YAAL,CAAkB,MAAlB;AAFR,IAAP;AAIA;;;;;gCApGoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,QAAL;AACC,YAAO,0CAAP;AACD,SAAK,cAAL;AACC,YAAO,IAAI,OAAO,OAAX,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,2DAAkE,UAAlE,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;;AAaC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,qCAA2B,MAA3B,CAAkC,MAAM,MAAN,IAAgB,EAAlD,CADM,EAEN,IAAI,OAAO,OAAX,CAAmB,EAAE,MAAO,MAAM,YAAN,IAAsB,EAA/B,EAAnB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;;;;kBA1EmB,qB","file":"IssuerAndSerialNumber.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\n//**************************************************************************************\r\nexport default class IssuerAndSerialNumber\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerAndSerialNumber class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerAndSerialNumber.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerAndSerialNumber.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerAndSerialNumber class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//IssuerAndSerialNumber ::= SEQUENCE {\r\n\t\t//    issuer Name,\r\n\t\t//    serialNumber CertificateSerialNumber }\r\n\t\t//\r\n\t\t//CertificateSerialNumber ::= INTEGER\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tRelativeDistinguishedNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerAndSerialNumber\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
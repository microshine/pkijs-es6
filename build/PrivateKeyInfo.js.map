{"version":3,"sources":["../src/PrivateKeyInfo.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,c;;;;;;;;AAQpB,2BACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,OAAL,GAAe,iCAAmB,UAAnB,EAA+B,SAA/B,EAA0C,eAAe,aAAf,CAA6B,SAA7B,CAA1C,CAAf;;;;;AAKA,OAAK,mBAAL,GAA2B,iCAAmB,UAAnB,EAA+B,qBAA/B,EAAsD,eAAe,aAAf,CAA6B,qBAA7B,CAAtD,CAA3B;;;;;AAKA,OAAK,UAAL,GAAkB,iCAAmB,UAAnB,EAA+B,YAA/B,EAA6C,eAAe,aAAf,CAA6B,YAA7B,CAA7C,CAAlB;;AAEA,MAAG,gBAAgB,UAAnB;;;;;AAKC,QAAK,UAAL,GAAkB,iCAAmB,UAAnB,EAA+B,YAA/B,EAA6C,eAAe,aAAf,CAA6B,YAA7B,CAA7C,CAAlB;;AAED,MAAG,eAAe,UAAlB;;;;;AAKC,QAAK,SAAL,GAAiB,iCAAmB,UAAnB,EAA+B,WAA/B,EAA4C,eAAe,aAAf,CAA6B,WAA7B,CAA5C,CAAjB;;;;AAID,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;;AAGD,MAAG,UAAU,UAAb,EACC,KAAK,QAAL,CAAc,WAAW,IAAzB;;AAED;;;;;;;;;;;;;;;;6BA+EU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,eAAe,MAAf,CAAsB;AACrB,WAAO;AACN,cAAS,SADH;AAEN,0BAAqB;AACpB,aAAO;AACN,kBAAW;AADL;AADa,MAFf;AAON,iBAAY,YAPN;AAQN,iBAAY;AARN;AADc,IAAtB,CAFY,CAAb;;AAgBA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;;;;AAID,QAAK,OAAL,GAAe,KAAK,MAAL,CAAY,OAAZ,CAAoB,UAApB,CAA+B,QAA9C;AACA,QAAK,mBAAL,GAA2B,kCAAwB,EAAE,QAAQ,KAAK,MAAL,CAAY,mBAAtB,EAAxB,CAA3B;AACA,QAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,UAA9B;;AAEA,OAAG,gBAAgB,KAAK,MAAxB,EACC,KAAK,UAAL,GAAkB,MAAM,IAAN,CAAW,KAAK,MAAL,CAAY,UAAvB,EAAmC;AAAA,WAAW,wBAAc,EAAE,QAAQ,OAAV,EAAd,CAAX;AAAA,IAAnC,CAAlB;;AAED,WAAO,KAAK,mBAAL,CAAyB,WAAhC;AAEC,SAAK,sBAAL;;AACC;AACC,UAAM,iBAAiB,OAAO,OAAP,CAAe,KAAK,UAAL,CAAgB,UAAhB,CAA2B,QAA1C,CAAvB;AACA,UAAG,eAAe,MAAf,KAA2B,CAAC,CAA/B,EACC,KAAK,SAAL,GAAiB,4BAAkB,EAAE,QAAQ,eAAe,MAAzB,EAAlB,CAAjB;AACD;AACD;AACD,SAAK,mBAAL;;AACC,SAAG,qBAAqB,KAAK,mBAA7B,EACA;AACC,UAAG,KAAK,mBAAL,CAAyB,eAAzB,YAAoD,OAAO,gBAA9D,EACA;AACC,WAAM,iBAAiB,OAAO,OAAP,CAAe,KAAK,UAAL,CAAgB,UAAhB,CAA2B,QAA1C,CAAvB;AACA,WAAG,eAAe,MAAf,KAA2B,CAAC,CAA/B,EACA;AACC,aAAK,SAAL,GAAiB,2BAAiB;AACjC,qBAAY,KAAK,mBAAL,CAAyB,eAAzB,CAAyC,UAAzC,CAAoD,QAApD,EADqB;AAEjC,iBAAQ,eAAe;AAFU,SAAjB,CAAjB;AAIA;AACD;AACD;AACD;AACD;AAzBD;;AA4BA;;;;;;;;;6BAOD;;AAEC,OAAM,cAAc,CACnB,IAAI,OAAO,OAAX,CAAmB,EAAE,OAAO,KAAK,OAAd,EAAnB,CADmB,EAEnB,KAAK,mBAAL,CAAyB,QAAzB,EAFmB,EAGnB,KAAK,UAHc,CAApB;;AAMA,OAAG,gBAAgB,IAAnB,EACA;AACC,gBAAY,IAAZ,CAAiB,IAAI,OAAO,WAAX,CAAuB;AACvC,eAAU,IAD6B;AAEvC,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MAF8B;AAMvC,YAAO,MAAM,IAAN,CAAW,KAAK,UAAhB,EAA4B;AAAA,aAAW,QAAQ,QAAR,EAAX;AAAA,MAA5B;AANgC,KAAvB,CAAjB;AAQA;;;;AAID,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO;AADoB,IAApB,CAAR;;AAIA;;;;;;;;;2BAOD;;AAEC,OAAI,eAAe,IAAhB,KAA0B,KAA7B,EACA;AACC,QAAM,SAAS;AACd,cAAS,KAAK,OADA;AAEd,0BAAqB,KAAK,mBAAL,CAAyB,MAAzB,EAFP;AAGd,iBAAY,KAAK,UAAL,CAAgB,MAAhB;AAHE,KAAf;;AAMA,QAAG,gBAAgB,IAAnB,EACC,OAAO,UAAP,GAAoB,MAAM,IAAN,CAAW,KAAK,UAAhB,EAA4B;AAAA,YAAW,QAAQ,MAAR,EAAX;AAAA,KAA5B,CAApB;;AAED,WAAO,MAAP;AACA;;;;AAID,OAAM,MAAM,EAAZ;;AAEA,WAAO,KAAK,mBAAL,CAAyB,WAAhC;AAEC,SAAK,mBAAL;;AACC,SAAI,GAAJ,GAAU,IAAV;AACA;AACD,SAAK,sBAAL;;AACC,SAAI,GAAJ,GAAU,KAAV;AACA;AACD;AARD;;AAWA,OAAM,eAAe,KAAK,SAAL,CAAe,MAAf,EAArB;;AA/BD;AAAA;AAAA;;AAAA;AAiCC,yBAAiB,OAAO,IAAP,CAAY,YAAZ,CAAjB;AAAA,SAAU,GAAV;;AACC,SAAI,GAAJ,IAAW,aAAa,GAAb,CAAX;AADD;AAjCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoCC,UAAO,GAAP;;AAEA;;;;;;;;;2BAMQ,I,EACT;AACC,OAAG,SAAS,IAAZ,EACA;AACC,YAAO,KAAK,GAAL,CAAS,WAAT,EAAP;AAEC,UAAK,IAAL;AACC,WAAK,SAAL,GAAiB,2BAAiB,EAAE,UAAF,EAAjB,CAAjB;;AAEA,WAAK,mBAAL,GAA2B,kCAAwB;AAClD,oBAAa,mBADqC;AAElD,wBAAiB,IAAI,OAAO,gBAAX,CAA4B,EAAE,OAAO,KAAK,SAAL,CAAe,UAAxB,EAA5B;AAFiC,OAAxB,CAA3B;AAIA;AACD,UAAK,KAAL;AACC,WAAK,SAAL,GAAiB,4BAAkB,EAAE,UAAF,EAAlB,CAAjB;;AAEA,WAAK,mBAAL,GAA2B,kCAAwB;AAClD,oBAAa,sBADqC;AAElD,wBAAiB,IAAI,OAAO,IAAX;AAFiC,OAAxB,CAA3B;AAIA;AACD;AACC,YAAM,IAAI,KAAJ,2CAAkD,KAAK,GAAvD,CAAN;AAnBF;;AAsBA,SAAK,UAAL,GAAkB,IAAI,OAAO,WAAX,CAAuB,EAAE,UAAU,KAAK,SAAL,CAAe,QAAf,GAA0B,KAA1B,CAAgC,KAAhC,CAAZ,EAAvB,CAAlB;AACA;AACD;;;;;gCApPoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,SAAL;AACC,YAAO,CAAP;AACD,SAAK,qBAAL;AACC,YAAO,mCAAP;AACD,SAAK,YAAL;AACC,YAAO,IAAI,OAAO,WAAX,EAAP;AACD,SAAK,YAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,oDAA2D,UAA3D,CAAN;AAXF;AAaA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;;;;;;;;;;AAqBC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,IAAI,OAAO,OAAX,CAAmB,EAAE,MAAO,MAAM,OAAN,IAAiB,EAA1B,EAAnB,CADM,EAEN,8BAAoB,MAApB,CAA2B,MAAM,mBAAN,IAA6B,EAAxD,CAFM,EAGN,IAAI,OAAO,WAAX,CAAuB,EAAE,MAAO,MAAM,UAAN,IAAoB,EAA7B,EAAvB,CAHM,EAIN,IAAI,OAAO,WAAX,CAAuB;AACtB,eAAU,IADY;AAEtB,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MAFa;AAMtB,YAAO,CACN,IAAI,OAAO,QAAX,CAAoB;AACnB,YAAO,MAAM,UAAN,IAAoB,EADR;AAEnB,aAAO,oBAAU,MAAV;AAFY,MAApB,CADM;AANe,KAAvB,CAJM;AAFoB,IAApB,CAAR;AAqBA;;;;;;;;kBA3HmB,c","file":"PrivateKeyInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Attribute from \"./Attribute\";\r\nimport ECPrivateKey from \"./ECPrivateKey\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey\";\r\n//**************************************************************************************\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @description Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PrivateKeyInfo ::= SEQUENCE {\r\n\t\t//    version Version,\r\n\t\t//    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t\t//    privateKey PrivateKey,\r\n\t\t//    attributes [0] Attributes OPTIONAL }\r\n\t\t//\r\n\t\t//Version ::= INTEGER {v1(0)} (v1,...)\r\n\t\t//\r\n\t\t//PrivateKey ::= OCTET STRING\r\n\t\t//\r\n\t\t//Attributes ::= SET OF Attribute\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \\\"kty\\\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
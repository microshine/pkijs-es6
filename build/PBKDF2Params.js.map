{"version":3,"sources":["../src/PBKDF2Params.js"],"names":[],"mappings":"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","file":"PBKDF2Params.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\n//**************************************************************************************\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description keyLength\r\n\t\t */\r\n\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description prf\r\n\t\t */\r\n\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PBKDF2-params ::= SEQUENCE {\r\n\t\t//    salt CHOICE {\r\n\t\t//        specified OCTET STRING,\r\n\t\t//        otherSource AlgorithmIdentifier },\r\n\t\t//  iterationCount INTEGER (1..MAX),\r\n\t\t//  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t\t//  prf AlgorithmIdentifier\r\n\t\t//    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2_params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t\r\n\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\r\n\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t_object.keyLength = this.keyLength;\r\n\r\n\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t_object.prf = this.prf.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/PublicKeyInfo.js"],"names":[],"mappings":"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","file":"PublicKeyInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto } from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport ECPublicKey from \"./ECPublicKey\";\r\nimport RSAPublicKey from \"./RSAPublicKey\";\r\n//**************************************************************************************\r\nexport default class PublicKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @description Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t\t//    algorithm            AlgorithmIdentifier,\r\n\t\t//    subjectPublicKey     BIT STRING  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PUBLIC_KEY_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \\\"kty\\\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(exportedKey => {\r\n\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t}\r\n\t\t\tcatch(exception)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\t\t}, error => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/KeyAgreeRecipientInfo.js"],"names":[],"mappings":"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","file":"KeyAgreeRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys\";\r\nimport Certificate from \"./Certificate\";\r\n//**************************************************************************************\r\nexport default class KeyAgreeRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OriginatorIdentifierOrKey}\r\n\t\t * @description originator\r\n\t\t */\r\n\t\tthis.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\r\n\r\n\t\tif(\"ukm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description ukm\r\n\t\t\t */\r\n\t\t\tthis.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {RecipientEncryptedKeys}\r\n\t\t * @description recipientEncryptedKeys\r\n\t\t */\r\n\t\tthis.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @description recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn new OriginatorIdentifierOrKey();\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn new RecipientEncryptedKeys();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\")));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn (memberValue.encryptedKeys.length === 0);\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now leave it as is\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KeyAgreeRecipientInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,  -- always set to 3\r\n\t\t//    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n\t\t//    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n\t\t//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t\t//    recipientEncryptedKeys RecipientEncryptedKeys }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originator]\r\n\t\t * @property {string} [ukm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [recipientEncryptedKeys]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"\",\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: names.version || \"\" }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tOriginatorIdentifierOrKey.schema(names.originator || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString({ name: names.ukm || \"\" })]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tRecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginator: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"originator\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tukm: \"ukm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\trecipientEncryptedKeys: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"recipientEncryptedKeys\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\r\n\r\n\t\tif(\"ukm\" in asn1.result)\r\n\t\t\tthis.ukm = asn1.result.ukm;\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for final sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t},\r\n\t\t\tvalue: [this.originator.toSchema()]\r\n\t\t}));\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.ukm]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.recipientEncryptedKeys.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\toriginator: this.originator.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t\t_object.ukm = this.ukm.toJSON();\r\n\r\n\t\t_object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\r\n\t\t_object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/OCSPRequest.js"],"names":[],"mappings":"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","file":"OCSPRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getAlgorithmParameters, getCrypto, createCMSECDSASignature } from \"./common\";\r\nimport TBSRequest from \"./TBSRequest\";\r\nimport Signature from \"./Signature\";\r\nimport Request from \"./Request\";\r\nimport CertID from \"./CertID\";\r\nimport Certificate from \"./Certificate\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\n//**************************************************************************************\r\nexport default class OCSPRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @description tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @description optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OCSPRequest     ::=     SEQUENCE {\r\n\t\t//    tbsRequest                  TBSRequest,\r\n\t\t//    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSP_REQUEST\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get hashing algorithm\r\n\t\tif(typeof hashAlgorithm === \"undefined\")\r\n\t\t\thashAlgorithm = \"SHA-1\";\r\n\t\telse\r\n\t\t{\r\n\t\t\t//region Simple check for supported algorithm\r\n\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\tif(oid === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.optionalSignature.signatureAlgorithm.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.optionalSignature.signatureAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tconst tbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(defParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(tbs)).then(result => {\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
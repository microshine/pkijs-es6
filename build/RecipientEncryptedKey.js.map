{"version":3,"sources":["../src/RecipientEncryptedKey.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,qB;;;;;;;;AAQpB,kCACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,GAAL,GAAW,iCAAmB,UAAnB,EAA+B,KAA/B,EAAsC,sBAAsB,aAAtB,CAAoC,KAApC,CAAtC,CAAX;;;;;AAKA,OAAK,YAAL,GAAoB,iCAAmB,UAAnB,EAA+B,cAA/B,EAA+C,sBAAsB,aAAtB,CAAoC,cAApC,CAA/C,CAApB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAuEU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,sBAAsB,MAAtB,CAA6B;AAC5B,WAAO;AACN,UAAK;AACJ,aAAO;AACN,kBAAW;AADL;AADH,MADC;AAMN,mBAAc;AANR;AADqB,IAA7B,CAFY,CAAb;;AAcA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,+EAAV,CAAN;;;;AAID,QAAK,GAAL,GAAW,0CAAgC,EAAE,QAAQ,KAAK,MAAL,CAAY,GAAtB,EAAhC,CAAX;AACA,QAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,YAAhC;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,KAAK,GAAL,CAAS,QAAT,EADM,EAEN,KAAK,YAFC;AADoB,IAApB,CAAR;;AAOA;;;;;;;;;2BAOD;AACC,UAAO;AACN,SAAK,KAAK,GAAL,CAAS,MAAT,EADC;AAEN,kBAAc,KAAK,YAAL,CAAkB,MAAlB;AAFR,IAAP;AAIA;;;;;gCAtHoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,KAAL;AACC,YAAO,2CAAP;AACD,SAAK,cAAL;AACC,YAAO,IAAI,OAAO,WAAX,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,2DAAkE,UAAlE,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,KAAL;AACC,YAAS,YAAY,OAAZ,KAAyB,CAAC,CAA3B,IAAoC,WAAW,WAAZ,KAA6B,KAAxE;AACD,SAAK,cAAL;AACC,YAAQ,YAAY,OAAZ,CAAoB,sBAAsB,aAAtB,CAAoC,cAApC,CAApB,CAAR;AACD;AACC,WAAM,IAAI,KAAJ,2DAAkE,UAAlE,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;;AAaC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,sCAA4B,MAA5B,CAAmC,MAAM,GAAN,IAAa,EAAhD,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB,EAAE,MAAO,MAAM,YAAN,IAAsB,EAA/B,EAAvB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;;;;kBA5FmB,qB","file":"RecipientEncryptedKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier\";\r\n//**************************************************************************************\r\nexport default class RecipientEncryptedKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientEncryptedKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {KeyAgreeRecipientIdentifier}\r\n\t\t * @description rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", RecipientEncryptedKey.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", RecipientEncryptedKey.defaultValues(\"encryptedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn new KeyAgreeRecipientIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientEncryptedKey.defaultValues(\"encryptedKey\")));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RecipientEncryptedKey ::= SEQUENCE {\r\n\t\t//    rid KeyAgreeRecipientIdentifier,\r\n\t\t//    encryptedKey EncryptedKey }\r\n\t\t//\r\n\t\t//EncryptedKey ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tKeyAgreeRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientEncryptedKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientEncryptedKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.rid.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
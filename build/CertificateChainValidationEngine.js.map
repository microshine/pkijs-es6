{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":[],"mappings":"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","file":"CertificateChainValidationEngine.js","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList\";\r\nimport Certificate from \"./Certificate\";\r\nimport generatorsDriver from \"./GeneratorsDriver\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", CertificateChainValidationEngine.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", CertificateChainValidationEngine.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", CertificateChainValidationEngine.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", CertificateChainValidationEngine.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", CertificateChainValidationEngine.defaultValues(\"checkDate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tsort()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Finding certificate issuer\r\n\t\tfunction *findIssuer(certificate, index)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\r\n\t\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tconst verificationResult = yield certificate.verify(localCerts[i]);\r\n\t\t\t\t\tif(verificationResult)\r\n\t\t\t\t\t\tresult.push(i);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex) {}\r\n\t\t\t}\r\n\r\n\t\t\treturn ((result.length) ? result : [-1]);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Building certificate path\r\n\t\tfunction *buildPath(certificate, index)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst findIssuerResult = yield findIssuer(certificate, index);\r\n\t\t\tif((findIssuerResult.length === 1) && (findIssuerResult[0] === (-1)))\r\n\t\t\t\tthrow new Error(\"Incorrect result\");\r\n\r\n\t\t\tif(findIssuerResult.length === 1)\r\n\t\t\t{\r\n\t\t\t\tif(findIssuerResult[0] === index)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(findIssuerResult);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst buildPathResult = yield buildPath(localCerts[findIssuerResult[0]], findIssuerResult[0]);\r\n\r\n\t\t\t\tfor(let i = 0; i < buildPathResult.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[i].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[0]);\r\n\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(findIssuerResult[i] === index)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst buildPathResult = yield buildPath(localCerts[findIssuerResult[i]], findIssuerResult[i]);\r\n\r\n\t\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\r\n\t\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find CRL for specific certificate\r\n\t\tfunction *findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Find all CRLs for crtificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = yield crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 1,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tfunction *findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = yield _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check for certificate to be CA\r\n\t\tfunction *checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Basic check for certificate path\r\n\t\tfunction *basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"Certificate validity period is out of checking date\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check certificate name chain\r\n\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty the we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 2); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult;\r\n\t\t\t\t\tlet crlResult;\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = yield findOCSP(path[i], path[i + 1]);\r\n\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = yield findCRL(path[i]);\r\n\t\t\t\t\t\tif(crlResult.status)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\tconst isCertificateCA = yield checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = yield checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn generatorsDriver(function *generatorFunction()\r\n\t\t{\r\n\t\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\t\tlocalCerts.push(..._this.certs);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check all certificates for been unique\r\n\t\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === j)\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result;\r\n\t\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Build path for \"end entity\" certificate\r\n\t\t\tresult = yield buildPath(localCerts[localCerts.length - 1], localCerts.length - 1);\r\n\t\t\tif(result.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 60,\r\n\t\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = false;\r\n\t\t\t\tconst latestItem = ((result[i]).length - 1);\r\n\t\t\t\tconst certificate = localCerts[(result[i])[latestItem]];\r\n\r\n\t\t\t\tfor(let j = 0; j < _this.trustedCerts.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[j].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!found)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(result.length === 0)\r\n\t\t\t{\r\n\t\t\t\tthrow {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 97,\r\n\t\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\t\tlet shortestLength = result[0].length;\r\n\t\t\tlet shortestIndex = 0;\r\n\r\n\t\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t\t{\r\n\t\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\t\tshortestIndex = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Create certificate path for basic check\r\n\t\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\t\tcertificatePath.push(localCerts[(result[shortestIndex])[i]]);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Perform basic checking for all certificates in the path\r\n\t\t\tresult = yield basicCheck(certificatePath, _this.checkDate);\r\n\t\t\tif(result.result === false)\r\n\t\t\t\tthrow result;\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn certificatePath;\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial checks\r\n\t\tif(this.certs.length === 0)\r\n\t\t\treturn Promise.reject(\"Empty certificate array\");\r\n\t\t//endregion\r\n\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\r\n\t\t//region Get input variables\r\n\t\tlet initialPolicySet = [];\r\n\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\r\n\t\tlet initialExplicitPolicy = false;\r\n\t\tlet initialPolicyMappingInhibit = false;\r\n\t\tlet initialInhibitPolicy = false;\r\n\r\n\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\r\n\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\r\n\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\r\n\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\r\n\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\r\n\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\r\n\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\r\n\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\r\n\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\r\n\t\tconst pendingConstraints = new Array(3);\r\n\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\r\n\t\tlet explicitPolicyPending = 0;\r\n\t\tlet policyMappingInhibitPending = 0;\r\n\t\tlet inhibitAnyPolicyPending = 0;\r\n\r\n\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\r\n\t\tlet pathDepth = 1;\r\n\t\t//endregion\r\n\r\n\t\t//region Sorting certificates in the chain array\r\n\t\tsequence = this.sort().then(sortedCerts => {\r\n\t\t\tthis.certs = sortedCerts;\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Work with policies\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Combine output object\r\n\t\t\treturn {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings\r\n\t\t\t};\r\n\t\t\t//endregion\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Work with name constraints\r\n\t\tsequence = sequence.then(policyResult => {\r\n\t\t\t//region Auxiliary functions for name constraints checking\r\n\t\t\tfunction compareDNSName(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Length calculation and additional check\r\n\t\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\t\tconst constrLen = constraintSplitted.length;\r\n\r\n\t\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\r\n\t\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Splitted array length checking\r\n\t\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\r\n\t\t\t\t\tif(result)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n\t\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Find out a major URI part to compare with\r\n\t\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\r\n\t\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareIPAddress(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n\t\t\t\t//region Common variables\r\n\t\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Work with IPv4 addresses\r\n\t\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Work with IPv6 addresses\r\n\t\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t\t{\r\n\t\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n\t\t\t\t//region Initial check\r\n\t\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet result = true;\r\n\t\t\t\tlet nameStart = 0;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet localResult = false;\r\n\r\n\t\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\r\n\t\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\t\tresult = result && localResult;\r\n\r\n\t\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(localResult === false)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tformFound = true;\r\n\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\r\n\t\t\t\t\treturn Promise.reject(policyResult);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\r\n\t\t\t\t\t\treturn Promise.reject(policyResult);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\r\n\t\t\t\t\treturn Promise.reject(policyResult);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn policyResult;\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Error handling stub\r\n\t\tsequence = sequence.then(result => result, error => {\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error.message\r\n\t\t\t};\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
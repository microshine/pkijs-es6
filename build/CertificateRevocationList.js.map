{"version":3,"sources":["../src/CertificateRevocationList.js"],"names":[],"mappings":"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","file":"CertificateRevocationList.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport { getOIDByAlgorithm,  getAlgorithmParameters, getCrypto, getAlgorithmByOID, createECDSASignatureFromCMS, createCMSECDSASignature, getHashAlgorithm } from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\nimport Time from \"./Time\";\r\nimport RevokedCertificate from \"./RevokedCertificate\";\r\nimport Extensions from \"./Extensions\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\nexport default class CertificateRevocationList\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @description nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @description revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateList  ::=  SEQUENCE  {\r\n\t\t//    tbsCertList          TBSCertList,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signatureValue       BIT STRING  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRL\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get hashing algorithm\r\n\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.signature.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tthis.signatureAlgorithm.algorithmId = this.signature.algorithmId;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.signature = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.signatureAlgorithm = this.signature; // Must be the same\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(\r\n\t\t\tdefParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(this.tbs)\r\n\t\t).then(result => {\r\n\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t}, error => Promise.reject(`Signing error: ${error}`));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst signature = this.signatureValue;\r\n\t\tconst tbs = this.tbs;\r\n\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t//endregion\r\n\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"simpl.CERT\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Import public key\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(this.signature.algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${this.signature.algorithmId}`);\r\n\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\r\n\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\tpublicKeyInfoView,\r\n\t\t\t\talgorithm.algorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\talgorithm.usages\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Verify signature for the certificate\r\n\t\tsequence = sequence.then(publicKey => {\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(tbs)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
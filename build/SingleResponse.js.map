{"version":3,"sources":["../src/SingleResponse.js"],"names":[],"mappings":"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","file":"SingleResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertID from \"./CertID\";\r\nimport Extension from \"./Extension\";\r\nimport Extensions from \"./Extensions\";\r\n//**************************************************************************************\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @description certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @description nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SingleResponse ::= SEQUENCE {\r\n\t\t//    certID                       CertID,\r\n\t\t//    certStatus                   CertStatus,\r\n\t\t//    thisUpdate                   GeneralizedTime,\r\n\t\t//    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t\t//    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t\t//\r\n\t\t//CertStatus ::= CHOICE {\r\n\t\t//    good        [0]     IMPLICIT NULL,\r\n\t\t//    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t\t//    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t\t//\r\n\t\t//RevokedInfo ::= SEQUENCE {\r\n\t\t//    revocationTime              GeneralizedTime,\r\n\t\t//    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t\t//\r\n\t\t//UnknownInfo ::= NULL\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"value_block\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"value_block\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.nextUpdate }));\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/SignedData.js"],"names":[],"mappings":"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","file":"SignedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, createCMSECDSASignature, getAlgorithmByOID, createECDSASignatureFromCMS, getAlgorithmParameters } from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo\";\r\nimport Certificate from \"./Certificate\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat\";\r\nimport SignerInfo from \"./SignerInfo\";\r\nimport CertificateSet from \"./CertificateSet\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\nimport TSTInfo from \"./TSTInfo\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\n//**************************************************************************************\r\nexport default class SignedData \r\n{\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @description digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @description encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @description certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @description crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @description signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t\t//    encapContentInfo EncapsulatedContentInfo,\r\n\t\t//    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t\t//    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t\t//    signerInfos SignerInfos }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema(names.certificates || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcertificates: \"SignedData.certificates\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_SIGNED_DATA\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.certificates = Array.from(asn1.result[\"SignedData.certificates\"], certificate => {\r\n\t\t\t\tif(certificate.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new Certificate({ schema: certificate });\r\n\r\n\t\t\t\tif((certificate.idBlock.tagClass === 3) && (certificate.idBlock.tagNumber === 3))\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Create SEQUENCE from [3]\r\n\t\t\t\t\tcertificate.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\t\tcertificate.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t\t//endregion\r\n\t\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: certificate });\r\n\t\t\t\t}\r\n\t\t\t\t//else // For now we would ignore \"AttributeCertificateV1\" and \"AttributeCertificateV1\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl => {\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.certificates, certificate => {\r\n\t\t\t\t\tif(certificate instanceof OtherCertificateFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst certificateSchema = certificate.toSchema(encodeFlag);\r\n\r\n\t\t\t\t\t\tcertificateSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcertificateSchema.idBlock.tagNumber = 3;\r\n\r\n\t\t\t\t\t\treturn certificateSchema;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn certificate.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl => {\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param signer\r\n\t * @param data\r\n\t * @param trustedCerts\r\n\t * @param checkDate\r\n\t * @param checkChain\r\n\t * @param includeSignerCertificate\r\n\t * @param extendedMode\r\n\t * @returns {*}\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\tincludeSignerCertificate = false,\r\n\t\textendedMode = false\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet publicKey;\r\n\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data \r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Find a certificate for specified signer \r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() => {\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results => {\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type \r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate \r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate \r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result => {\r\n\t\t\t\t//region Veify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn Promise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate)))\r\n\t\t\t\t\t.then(promiseResults => {\r\n\t\t\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine({\r\n\t\t\t\t\t\t\tcheckDate,\r\n\t\t\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\t\t\ttrustedCerts\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\r\n\t\t\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(crl instanceof CertificateRevocationList)\r\n\t\t\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\r\n\t\t\t\t\t\treturn certificateChainEngine.verify().then(verificationResult => {\r\n\t\t\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\t\t\treturn Promise.resolve(true);\r\n\r\n\t\t\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\t\t\tmessage: \"Validation of signer's certificate failed\",\r\n\t\t\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t\t\t}, error => {\r\n\t\t\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, promiseError => {\r\n\t\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\t\tcode: 6,\r\n\t\t\t\t\t\t\t\tmessage: `Error during checking certificates for CA flag: ${promiseError}`,\r\n\t\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn Promise.reject(`Error during checking certificates for CA flag: ${promiseError}`);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Find signer's hashing algorithm \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Veify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create correct data block for verification \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Veify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Import public key from signer's certificate \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Veify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signerCertificate.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signerCertificate.signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = signerCertificate.subjectPublicKeyInfo.algorithm.algorithmId;\r\n\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 11,\r\n\t\t\t\t\t\tmessage: `Unsupported public key algorithm: ${algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tif((signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n\t\t\t\tconst curveObject = getAlgorithmByOID(signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${signerCertificate.subjectPublicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\talgorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst publicKeyInfoSchema = signerCertificate.subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Verify signer's signature \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t// #region Veify result of previous operation\r\n\t\t\tif(typeof result == \"boolean\")\r\n\t\t\t\treturn false;\r\n\t\t\t// #endregion\r\n\t\t\t\r\n\t\t\tpublicKey = result;\r\n\t\t\t\r\n\t\t\t// #region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t\t// #endregion\r\n\t\t}).then(result => {\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}).then(result => {\r\n\t\t\t//region Check result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signerInfos[signer].signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 12,\r\n\t\t\t\t\t\t\tmessage: ex,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\r\n\t\t\t\tlet hashName = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\t\tcode: 13,\r\n\t\t\t\t\t\t\t\tmessage: `Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\thashName = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\talgorithm.algorithm.hash.name = hashName;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = this.signerInfos[signer].signature.valueBlock.valueHex;\r\n\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data));\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Make a final result \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}, error => {\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm, data)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tdata = data || new ArrayBuffer(0);\r\n\t\tlet hashAlgorithmOID = \"\";\r\n\t\t//endregion\r\n\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get hashing algorithm\r\n\t\tif(typeof hashAlgorithm === \"undefined\")\r\n\t\t\thashAlgorithm = \"SHA-1\";\r\n\r\n\t\t//region Simple check for supported algorithm\r\n\t\thashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t{\r\n\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\r\n\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(defParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data)).then(result => {\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\r\n\t\t\t\treturn result;\r\n\t\t\t}, error => Promise.reject(`Signing error: ${error}`));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
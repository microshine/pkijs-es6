{"version":3,"sources":["../src/KeyTransRecipientInfo.js"],"names":[],"mappings":"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","file":"KeyTransRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Certificate from \"./Certificate\";\r\nimport RecipientIdentifier from \"./RecipientIdentifier\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\n//**************************************************************************************\r\nexport default class KeyTransRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyTransRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RecipientIdentifier}\r\n\t\t * @description rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @description recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KeyTransRecipientInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,  -- always set to 0 or 2\r\n\t\t//    rid RecipientIdentifier,\r\n\t\t//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t\t//    encryptedKey EncryptedKey }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyTransRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\r\n\t\t\tthis.rid = asn1.result.rid.valueBlock.value[0]; // SubjectKeyIdentifier\r\n\t\telse\r\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tthis.version = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(this.rid.toSchema());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.rid]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
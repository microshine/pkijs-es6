{"version":3,"sources":["../src/SecretBag.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;;;;;;;IAEqB,S;;;;;;;;AAQpB,sBACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,YAAL,GAAoB,iCAAmB,UAAnB,EAA+B,cAA/B,EAA+C,UAAU,aAAV,CAAwB,cAAxB,CAA/C,CAApB;;;;;AAKA,OAAK,WAAL,GAAmB,iCAAmB,UAAnB,EAA+B,aAA/B,EAA8C,UAAU,aAAV,CAAwB,aAAxB,CAA9C,CAAnB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BA4EU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,UAAU,MAAV,CAAiB;AAChB,WAAO;AACN,SAAI,cADE;AAEN,YAAO;AAFD;AADS,IAAjB,CAFY,CAAb;;AAUA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,mEAAV,CAAN;;;;AAID,QAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,YAAZ,CAAyB,UAAzB,CAAoC,QAApC,EAApB;AACA,QAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,WAA/B;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,IAAI,OAAO,gBAAX,CAA4B,EAAE,OAAO,KAAK,YAAd,EAA5B,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB;AACtB,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MADa;AAKtB,YAAO,CAAC,KAAK,WAAL,CAAiB,QAAjB,EAAD;AALe,KAAvB,CAFM;AADoB,IAApB,CAAR;;AAaA;;;;;;;;;2BAOD;AACC,UAAO;AACN,kBAAc,KAAK,YADb;AAEN,iBAAa,KAAK,WAAL,CAAiB,MAAjB;AAFP,IAAP;AAIA;;;;;gCA7HoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,cAAL;AACC,YAAO,EAAP;AACD,SAAK,aAAL;AACC,YAAQ,IAAI,OAAO,GAAX,EAAR;AACD;AACC,WAAM,IAAI,KAAJ,+CAAsD,UAAtD,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,cAAL;AACC,YAAQ,gBAAgB,EAAxB;AACD,SAAK,aAAL;AACC,YAAQ,uBAAuB,OAAO,GAAtC;AACD;AACC,WAAM,IAAI,KAAJ,+CAAsD,UAAtD,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;AAYC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,IAAI,OAAO,gBAAX,CAA4B,EAAE,MAAO,MAAM,EAAN,IAAY,IAArB,EAA5B,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB;AACtB,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MADa;AAKtB,YAAO,CAAC,IAAI,OAAO,GAAX,CAAe,EAAE,MAAO,MAAM,KAAN,IAAe,OAAxB,EAAf,CAAD,C;AALe,KAAvB,CAFM;AAFoB,IAApB,CAAR;AAaA;;;;;;;;kBAjGmB,S","file":"SecretBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class SecretBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SecretBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description secretTypeId\r\n\t\t */\r\n\t\tthis.secretTypeId = getParametersValue(parameters, \"secretTypeId\", SecretBag.defaultValues(\"secretTypeId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description secretValue\r\n\t\t */\r\n\t\tthis.secretValue = getParametersValue(parameters, \"secretValue\", SecretBag.defaultValues(\"secretValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SecretBag ::= SEQUENCE {\r\n\t\t//    secretTypeId BAG-TYPE.&id ({SecretTypes}),\r\n\t\t//    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSecretBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"secretTypeId\",\r\n\t\t\t\t\tvalue: \"secretValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SecretBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\r\n\t\tthis.secretValue = asn1.result.secretValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.secretTypeId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.secretValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsecretTypeId: this.secretTypeId,\r\n\t\t\tsecretValue: this.secretValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/Extensions.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,U;;;;;;;;AAQpB,uBACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,UAAL,GAAkB,iCAAmB,UAAnB,EAA+B,YAA/B,EAA6C,WAAW,aAAX,CAAyB,YAAzB,CAA7C,CAAlB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAmDU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,WAAW,MAAX,CAAkB;AACjB,WAAO;AACN,iBAAY;AADN;AADU,IAAlB,CAFY,CAAb;;AASA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;;;;AAID,QAAK,UAAL,GAAkB,MAAM,IAAN,CAAW,KAAK,MAAL,CAAY,UAAvB,EAAmC;AAAA,WAAW,wBAAc,EAAE,QAAQ,OAAV,EAAd,CAAX;AAAA,IAAnC,CAAlB;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,MAAM,IAAN,CAAW,KAAK,UAAhB,EAA4B;AAAA,YAAW,QAAQ,QAAR,EAAX;AAAA,KAA5B;AADoB,IAApB,CAAR;;AAIA;;;;;;;;;2BAOD;AACC,UAAO;AACN,gBAAY,MAAM,IAAN,CAAW,KAAK,UAAhB,EAA4B;AAAA,YAAW,QAAQ,MAAR,EAAX;AAAA,KAA5B;AADN,IAAP;AAGA;;;;;gCAxFoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,YAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,gDAAuD,UAAvD,CAAN;AALF;AAOA;;;;;;;;;;;2BASD;AAAA,OADc,UACd,yDAD2B,EAC3B;AAAA,OAD+B,QAC/B,yDAD0C,KAC1C;;;;;;;;;;AASC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,sBAD2B;AAE3B,UAAO,MAAM,SAAN,IAAmB,EAFC;AAG3B,WAAO,CACN,IAAI,OAAO,QAAX,CAAoB;AACnB,WAAO,MAAM,UAAN,IAAoB,EADR;AAEnB,YAAO,oBAAU,MAAV,CAAiB,MAAM,SAAN,IAAmB,EAApC;AAFY,KAApB,CADM;AAHoB,IAApB,CAAR;AAUA;;;;;;;;kBAnEmB,U","file":"Extensions.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Extension from \"./Extension\";\r\n//**************************************************************************************\r\nexport default class Extensions\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extensions class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Extension>}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t//Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [extension]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.extensions || \"\"),\r\n\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtensions.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textensions: \"extensions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EXTENSIONS\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
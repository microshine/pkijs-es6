{"version":3,"sources":["../src/TBSRequest.js"],"names":[],"mappings":"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","file":"TBSRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName\";\r\nimport Request from \"./Request\";\r\nimport Extension from \"./Extension\";\r\nimport Extensions from \"./Extensions\";\r\n//**************************************************************************************\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @description version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @description requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TBSRequest      ::=     SEQUENCE {\r\n\t\t//    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t\t//    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t\t//    requestList                 SEQUENCE OF Request,\r\n\t\t//    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
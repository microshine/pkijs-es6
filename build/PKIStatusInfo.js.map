{"version":3,"sources":["../src/PKIStatusInfo.js"],"names":[],"mappings":"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","file":"PKIStatusInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @description statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PKIStatusInfo ::= SEQUENCE {\r\n\t\t//    status        PKIStatus,\r\n\t\t//    statusString  PKIFreeText     OPTIONAL,\r\n\t\t//    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
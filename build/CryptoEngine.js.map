{"version":3,"sources":["../src/CryptoEngine.js"],"names":[],"mappings":"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","file":"CryptoEngine.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString } from \"pvutils\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo\";\r\n//**************************************************************************************\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.crypto.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tif((jwk instanceof ArrayBuffer) === false)\r\n\t\t\t\tjwk = stringToArrayBuffer(JSON.stringify(jwk));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.crypto.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.crypto.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\tsequence = sequence.then(result => JSON.parse(arrayBufferToString(result)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.crypto.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result => {\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result => {\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.crypto.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.crypto.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.crypto.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.crypto.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.crypto.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.crypto.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.crypto.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.crypto.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.crypto.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.crypto.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
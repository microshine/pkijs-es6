{"version":3,"sources":["../src/AuthenticatedSafe.js"],"names":[],"mappings":"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","file":"AuthenticatedSafe.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport ContentInfo from \"./ContentInfo\";\r\nimport SafeContents from \"./SafeContents\";\r\nimport EnvelopedData from \"./EnvelopedData\";\r\nimport EncryptedData from \"./EncryptedData\";\r\n//**************************************************************************************\r\nexport default class AuthenticatedSafe\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthenticatedSafe class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<ContentInfo>}\r\n\t\t * @description safeContents\r\n\t\t */\r\n\t\tthis.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\"));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n\t\t//-- Data if unencrypted\r\n\t\t//-- EncryptedData if password-encrypted\r\n\t\t//-- EnvelopedData if public key-encrypted\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.contentInfos || \"\"),\r\n\t\t\t\t\tvalue: ContentInfo.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthenticatedSafe.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentInfos: \"contentInfos\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeContents, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeContents: Array.from(this.safeContents, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) == false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length != this.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" \r\n\t\tthis.parsedValue = {\r\n\t\t\tsafeContents: []\r\n\t\t};\r\n\t\t\r\n\t\tfor(const [index, content] of this.safeContents.entries())\r\n\t\t{\r\n\t\t\tswitch(content.contentType)\r\n\t\t\t{\r\n\t\t\t\t//region data \r\n\t\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\t\tif((content.content instanceof asn1js.OctetString) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\t\tlet asn1 = asn1js.fromBER(content.content.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Finilly initialize initial values of \"SafeContents\" type\r\n\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\tprivacyMode: 0, // No privacy, clear data\r\n\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region envelopedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.3\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"recipientCertificate\" in parameters.safeContents[index]) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet recipientCertificate = parameters.safeContents[index].recipientCertificate;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"recipientKey\" in parameters.safeContents[index]) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet recipientKey = parameters.safeContents[index].recipientKey;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EnvelopedData using first recipient information\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.decrypt(0, {\r\n\t\t\t\t\t\t\t\trecipientCertificate: recipientCertificate,\r\n\t\t\t\t\t\t\t\trecipientPrivateKey: recipientKey\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult => {\r\n\t\t\t\t\t\t\t\tlet asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 2, // Public-key privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region encryptedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.6\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet cmsEncrypted = new EncryptedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"password\" in parameters.safeContents[index]) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet password = parameters.safeContents[index].password;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.decrypt({\r\n\t\t\t\t\t\t\t\tpassword: password\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initialize internal data\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult => {\r\n\t\t\t\t\t\t\t\tlet asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 1, // Password-based privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \\\"contentType\\\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check data in \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) == false)\r\n\t\t\treturn Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n\t\t\r\n\t\tif((this.parsedValue instanceof Object) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((this.parsedValue.safeContents instanceof Array) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) == false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length != this.parsedValue.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create internal values from already parsed values \r\n\t\tthis.safeContents = [];\r\n\t\t\r\n\t\tfor(const [index, content] of this.parsedValue.safeContents.entries())\r\n\t\t{\r\n\t\t\t//region Check current \"content\" value\r\n\t\t\tif((\"privacyMode\" in content) == false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((\"value\" in content) == false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((content.value instanceof SafeContents) == false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\");\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tswitch(content.privacyMode)\r\n\t\t\t{\r\n\t\t\t\t//region No privacy \r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst contentBuffer = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: contentBuffer })\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with password\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet cmsEncrypted = new EncryptedData();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet currentParameters = parameters.safeContents[index];\r\n\t\t\t\t\t\tcurrentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Encrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.encrypt(currentParameters),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Store result content in CMS_CONTENT_INFO type\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.6\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEncrypted.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with public key\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet cmsEnveloped = new EnvelopedData();\r\n\t\t\t\t\t\tlet contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"encryptingCertificate\" in parameters.safeContents[index]) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"encryptionAlgorithm\" in parameters.safeContents[index]) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() == \"aes-cbc\"):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() == \"aes-gcm\"):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\": ${parameters.safeContents[index].encryptionAlgorithm}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length == 128):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length == 192):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length == 256):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \\\"encryptionAlgorithm.length\\\" in \\\"parameters.safeContents[i]\\\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making correct \"encryptionAlgorithm\" variable\r\n\t\t\t\t\t\tlet encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Append recipient for enveloped data\r\n\t\t\t\t\t\tcmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making encryption\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.3\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEnveloped.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Incorrect value for \\\"content.privacyMode\\\": ${content.privacyMode}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
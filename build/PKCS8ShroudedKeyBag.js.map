{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":[],"mappings":"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","file":"PKCS8ShroudedKeyBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport EncryptedData from \"./EncryptedData\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo\";\r\n//**************************************************************************************\r\nexport default class PKCS8ShroudedKeyBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t\t\r\n\t\t//EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t\t//    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t\t//    encryptedData EncryptedData\r\n\t\t//}\r\n\t\t\r\n\t\t//EncryptedData ::= OCTET STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\tresult => {\r\n\t\t\t\tlet asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) == false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
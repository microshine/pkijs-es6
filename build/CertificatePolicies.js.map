{"version":3,"sources":["../src/CertificatePolicies.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,mB;;;;;;;;AAQpB,gCACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,mBAAL,GAA2B,iCAAmB,UAAnB,EAA+B,qBAA/B,EAAsD,oBAAoB,aAApB,CAAkC,qBAAlC,CAAtD,CAA3B;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAkDU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,oBAAoB,MAApB,CAA2B;AAC1B,WAAO;AACN,0BAAqB;AADf;AADmB,IAA3B,CAFY,CAAb;;AASA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,6EAAV,CAAN;;;;AAID,QAAK,mBAAL,GAA2B,MAAM,IAAN,CAAW,KAAK,MAAL,CAAY,mBAAvB,EAA4C;AAAA,WAAW,gCAAsB,EAAE,QAAQ,OAAV,EAAtB,CAAX;AAAA,IAA5C,CAA3B;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,MAAM,IAAN,CAAW,KAAK,mBAAhB,EAAqC;AAAA,YAAW,QAAQ,QAAR,EAAX;AAAA,KAArC;AADoB,IAApB,CAAR;;AAIA;;;;;;;;;2BAOD;AACC,UAAO;AACN,yBAAqB,MAAM,IAAN,CAAW,KAAK,mBAAhB,EAAqC;AAAA,YAAW,QAAQ,MAAR,EAAX;AAAA,KAArC;AADf,IAAP;AAGA;;;;;gCAvFoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,qBAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,yDAAgE,UAAhE,CAAN;AALF;AAOA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;AAUC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,IAAI,OAAO,QAAX,CAAoB;AACnB,WAAO,MAAM,mBAAN,IAA6B,EADjB;AAEnB,YAAO,4BAAkB,MAAlB;AAFY,KAApB,CADM;AAFoB,IAApB,CAAR;AASA;;;;;;;;kBAlEmB,mB","file":"CertificatePolicies.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport PolicyInformation from \"./PolicyInformation\";\r\n//**************************************************************************************\r\nexport default class CertificatePolicies\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificatePolicies class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyInformation>}\r\n\t\t * @description certificatePolicies\r\n\t\t */\r\n\t\tthis.certificatePolicies = getParametersValue(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificatePolicies\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificatePolicies class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CertificatePolicies OID ::= 2.5.29.32\r\n\t\t//\r\n\t\t//certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificatePolicies]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.certificatePolicies || \"\"),\r\n\t\t\t\t\tvalue: PolicyInformation.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificatePolicies.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertificatePolicies: \"certificatePolicies\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificatePolicies, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificatePolicies: Array.from(this.certificatePolicies, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
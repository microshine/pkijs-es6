{"version":3,"sources":["../src/TSTInfo.js"],"names":[],"mappings":"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","file":"TSTInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID  } from \"./common\";\r\nimport MessageImprint from \"./MessageImprint\";\r\nimport Accuracy from \"./Accuracy\";\r\nimport GeneralName from \"./GeneralName\";\r\nimport Extension from \"./Extension\";\r\n//**************************************************************************************\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @description messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @description accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @description ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TSTInfo ::= SEQUENCE  {\r\n\t\t//   version                      INTEGER  { v1(1) },\r\n\t\t//   policy                       TSAPolicyId,\r\n\t\t//   messageImprint               MessageImprint,\r\n\t\t//   serialNumber                 INTEGER,\r\n\t\t//   genTime                      GeneralizedTime,\r\n\t\t//   accuracy                     Accuracy                 OPTIONAL,\r\n\t\t//   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t\t//   nonce                        INTEGER                  OPTIONAL,\r\n\t\t//   tsa                          [0] GeneralName          OPTIONAL,\r\n\t\t//   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TST_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore;\r\n\t\tlet notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(result =>\r\n\t\t\tisEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
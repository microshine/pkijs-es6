{"version":3,"sources":["../src/CertificationRequest.js"],"names":[],"mappings":"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","file":"CertificationRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getAlgorithmParameters, getCrypto, createCMSECDSASignature, getHashAlgorithm, getAlgorithmByOID, createECDSASignatureFromCMS } from \"./common\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Attribute from \"./Attribute\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificationRequest ::= SEQUENCE {\r\n\t\t//    certificationRequestInfo CertificationRequestInfo,\r\n\t\t//    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t\t//    signature                BIT STRING\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS10\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get hashing algorithm\r\n\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(\"Unsupported hash algorithm: {$hashAlgorithm}\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.signatureAlgorithm.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(defParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(this.tbs)\r\n\t\t).then(result => {\r\n\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t}, error => Promise.reject(`Signing error: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst subjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\tconst signature = this.signatureValue;\r\n\t\tconst tbs = this.tbs;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Find a correct hashing algorithm\r\n\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Importing public key\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(this.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = this.signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = this.subjectPublicKeyInfo.algorithm.algorithmId;\r\n\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\r\n\t\t\tconst algorithmName = algorithmObject.name;\r\n\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmName, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey => {\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(tbs));\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
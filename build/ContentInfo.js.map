{"version":3,"sources":["../src/ContentInfo.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;;;;;;;IAEqB,W;;;;;;;;AAQpB,wBACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,WAAL,GAAmB,iCAAmB,UAAnB,EAA+B,aAA/B,EAA8C,YAAY,aAAZ,CAA0B,aAA1B,CAA9C,CAAnB;;;;;AAKA,OAAK,OAAL,GAAe,iCAAmB,UAAnB,EAA+B,SAA/B,EAA0C,YAAY,aAAZ,CAA0B,SAA1B,CAA1C,CAAf;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BA+EU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,YAAY,MAAZ,EAFY,CAAb;;AAKA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN;;;;AAID,QAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,WAAZ,CAAwB,UAAxB,CAAmC,QAAnC,EAAnB;AACA,QAAK,OAAL,GAAe,KAAK,MAAL,CAAY,OAA3B;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,IAAI,OAAO,gBAAX,CAA4B,EAAE,OAAO,KAAK,WAAd,EAA5B,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB;AACtB,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MADa;AAKtB,YAAO,CAAC,KAAK,OAAN,C;AALe,KAAvB,CAFM;AADoB,IAApB,CAAR;;AAaA;;;;;;;;;2BAOD;AACC,OAAM,SAAS;AACd,iBAAa,KAAK;AADJ,IAAf;;AAIA,OAAG,EAAE,KAAK,OAAL,YAAwB,OAAO,GAAjC,CAAH,EACC,OAAO,OAAP,GAAiB,KAAK,OAAL,CAAa,MAAb,EAAjB;;AAED,UAAO,MAAP;AACA;;;;;gCA/HoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,aAAL;AACC,YAAO,EAAP;AACD,SAAK,SAAL;AACC,YAAO,IAAI,OAAO,GAAX,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,iDAAwD,UAAxD,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,aAAL;AACC,YAAQ,gBAAgB,EAAxB;AACD,SAAK,SAAL;AACC,YAAQ,uBAAuB,OAAO,GAAtC;AACD;AACC,WAAM,IAAI,KAAJ,iDAAwD,UAAxD,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;AAWC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,OAAI,cAAc,KAAf,KAA0B,KAA7B,EACC,MAAM,QAAN,GAAiB,KAAjB;;AAED,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,aADC;AAE3B,cAAU,MAAM,QAFW;AAG3B,WAAO,CACN,IAAI,OAAO,gBAAX,CAA4B,EAAE,MAAO,MAAM,WAAN,IAAqB,aAA9B,EAA5B,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB;AACtB,cAAS;AACR,gBAAU,CADF,E;AAER,iBAAW,C;AAFH,MADa;AAKtB,YAAO,CAAC,IAAI,OAAO,GAAX,CAAe,EAAE,MAAO,MAAM,OAAN,IAAiB,SAA1B,EAAf,CAAD,C;AALe,KAAvB,CAFM;AAHoB,IAApB,CAAR;AAcA;;;;;;;;kBApGmB,W","file":"ContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @description content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//ContentInfo ::= SEQUENCE {\r\n\t\t//    contentType ContentType,\r\n\t\t//    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_CONTENT_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
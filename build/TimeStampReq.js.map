{"version":3,"sources":["../src/TimeStampReq.js"],"names":[],"mappings":"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","file":"TimeStampReq.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport MessageImprint from \"./MessageImprint\";\r\nimport Extension from \"./Extension\";\r\n//**************************************************************************************\r\nexport default class TimeStampReq\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampReq class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TimeStampReq.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @description messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TimeStampReq.defaultValues(\"messageImprint\"));\r\n\r\n\t\tif(\"reqPolicy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @description reqPolicy\r\n\t\t\t */\r\n\t\t\tthis.reqPolicy = getParametersValue(parameters, \"reqPolicy\", TimeStampReq.defaultValues(\"reqPolicy\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TimeStampReq.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"certReq\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @description certReq\r\n\t\t\t */\r\n\t\t\tthis.certReq = getParametersValue(parameters, \"certReq\", TimeStampReq.defaultValues(\"certReq\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TimeStampReq.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn (memberValue === TimeStampReq.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TimeStampReq ::= SEQUENCE  {\r\n\t\t//    version               INTEGER  { v1(1) },\r\n\t\t//    messageImprint        MessageImprint,\r\n\t\t//    reqPolicy             TSAPolicyId              OPTIONAL,\r\n\t\t//    nonce                 INTEGER                  OPTIONAL,\r\n\t\t//    certReq               BOOLEAN                  DEFAULT FALSE,\r\n\t\t//    extensions            [0] IMPLICIT Extensions  OPTIONAL  }\r\n\t\t//\r\n\t\t//TSAPolicyId ::= OBJECT IDENTIFIER\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampReq\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TimeStampReq.version\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampReq.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\tname: (names.reqPolicy || \"TimeStampReq.reqPolicy\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TimeStampReq.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.certReq || \"TimeStampReq.certReq\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.extensions || \"TimeStampReq.extensions\"),\r\n\t\t\t\t\t\tvalue: Extension.schema()\r\n\t\t\t\t\t})]\r\n\t\t\t\t}) // IMPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampReq.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSP_REQUEST\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TimeStampReq.version\"].valueBlock.valueDec;\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TimeStampReq.messageImprint\"] });\r\n\t\tif(\"TimeStampReq.reqPolicy\" in asn1.result)\r\n\t\t\tthis.reqPolicy = asn1.result[\"TimeStampReq.reqPolicy\"].valueBlock.toString();\r\n\t\tif(\"TimeStampReq.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TimeStampReq.nonce\"];\r\n\t\tif(\"TimeStampReq.certReq\" in asn1.result)\r\n\t\t\tthis.certReq = asn1.result[\"TimeStampReq.certReq\"].valueBlock.value;\r\n\t\tif(\"TimeStampReq.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TimeStampReq.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.certReq }));\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\t_object.reqPolicy = this.reqPolicy;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\t_object.certReq = this.certReq;\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
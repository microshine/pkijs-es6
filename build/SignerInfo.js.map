{"version":3,"sources":["../src/SignerInfo.js"],"names":[],"mappings":"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","file":"SignerInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\n//**************************************************************************************\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignerInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    sid SignerIdentifier,\r\n\t\t//    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t\t//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t\t//    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t\t//    signature SignatureValue,\r\n\t\t//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t\t//\r\n\t\t//SignerIdentifier ::= CHOICE {\r\n\t\t//    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t\t//    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t\t//\r\n\t\t//SubjectKeyIdentifier ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_SIGNER_INFO\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"]} );\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
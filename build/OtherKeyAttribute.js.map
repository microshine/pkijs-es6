{"version":3,"sources":["../src/OtherKeyAttribute.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;;;;;;;IAEqB,iB;;;;;;;;AAQpB,8BACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,SAAL,GAAiB,iCAAmB,UAAnB,EAA+B,WAA/B,EAA4C,kBAAkB,aAAlB,CAAgC,WAAhC,CAA5C,CAAjB;;AAEA,MAAG,aAAa,UAAhB;;;;;AAKC,QAAK,OAAL,GAAe,iCAAmB,UAAnB,EAA+B,SAA/B,EAA0C,kBAAkB,aAAlB,CAAgC,SAAhC,CAA1C,CAAf;;;;AAID,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BA0EU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,kBAAkB,MAAlB,CAAyB;AACxB,WAAO;AACN,gBAAW,WADL;AAEN,cAAS;AAFH;AADiB,IAAzB,CAFY,CAAb;;AAUA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;;;;AAID,QAAK,SAAL,GAAiB,KAAK,MAAL,CAAY,SAAZ,CAAsB,UAAtB,CAAiC,QAAjC,EAAjB;;AAEA,OAAG,aAAa,KAAK,MAArB,EACC,KAAK,OAAL,GAAe,KAAK,MAAL,CAAY,OAA3B;;AAED;;;;;;;;;6BAOD;;AAEC,OAAM,cAAc,EAApB;;AAEA,eAAY,IAAZ,CAAiB,IAAI,OAAO,gBAAX,CAA4B,EAAE,OAAO,KAAK,SAAd,EAA5B,CAAjB;;AAEA,OAAG,aAAa,IAAhB,EACC,YAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,QAAb,EAAjB;;;;AAID,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO;AADoB,IAApB,CAAR;;AAIA;;;;;;;;;2BAOD;AACC,OAAM,UAAU;AACf,eAAW,KAAK;AADD,IAAhB;;AAIA,OAAG,aAAa,IAAhB,EACC,QAAQ,OAAR,GAAkB,KAAK,OAAL,CAAa,MAAb,EAAlB;;AAED,UAAO,OAAP;AACA;;;;;gCAjIoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,WAAL;AACC,YAAO,EAAP;AACD,SAAK,SAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,uDAA8D,UAA9D,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,WAAL;AACC,YAAQ,gBAAgB,EAAxB;AACD,SAAK,SAAL;AACC,YAAQ,OAAO,IAAP,CAAY,WAAZ,EAAyB,MAAzB,KAAoC,CAA5C;AACD;AACC,WAAM,IAAI,KAAJ,uDAA8D,UAA9D,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;AAYC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,cAAW,MAAM,QAAN,IAAkB,IADF;AAE3B,UAAO,MAAM,SAAN,IAAmB,EAFC;AAG3B,WAAO,CACN,IAAI,OAAO,gBAAX,CAA4B,EAAE,MAAO,MAAM,SAAN,IAAmB,EAA5B,EAA5B,CADM,EAEN,IAAI,OAAO,GAAX,CAAe;AACd,eAAU,IADI;AAEd,WAAO,MAAM,OAAN,IAAiB;AAFV,KAAf,CAFM;AAHoB,IAApB,CAAR;AAWA;;;;;;;;kBAjGmB,iB","file":"OtherKeyAttribute.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class OtherKeyAttribute\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherKeyAttribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description keyAttrId\r\n\t\t */\r\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\r\n\r\n\t\tif(\"keyAttr\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description keyAttr\r\n\t\t\t */\r\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherKeyAttribute ::= SEQUENCE {\r\n\t\t//    keyAttrId OBJECT IDENTIFIER,\r\n\t\t//    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [keyAttrId]\r\n\t\t * @property {string} [keyAttr]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.keyAttr || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherKeyAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\r\n\t\t\t\t\tkeyAttr: \"keyAttr\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n\r\n\t\tif(\"keyAttr\" in asn1.result)\r\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\toutputArray.push(this.keyAttr.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyAttrId: this.keyAttrId\r\n\t\t};\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
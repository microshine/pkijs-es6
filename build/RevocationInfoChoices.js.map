{"version":3,"sources":["../src/RevocationInfoChoices.js"],"names":[],"mappings":"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","file":"RevocationInfoChoices.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat\";\r\n//**************************************************************************************\r\nexport default class RevocationInfoChoices\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @description otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\r\n\t\t//RevocationInfoChoice ::= CHOICE {\r\n\t\t//    crl CertificateList,\r\n\t\t//    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CSM_REVOCATION_INFO_CHOICES\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element => {\r\n\t\t\tconst schema = element.toSchema();\r\n\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/MessageImprint.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,c;;;;;;;;AAQpB,2BACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,aAAL,GAAqB,iCAAmB,UAAnB,EAA+B,eAA/B,EAAgD,eAAe,aAAf,CAA6B,eAA7B,CAAhD,CAArB;;;;;AAKA,OAAK,aAAL,GAAqB,iCAAmB,UAAnB,EAA+B,eAA/B,EAAgD,eAAe,aAAf,CAA6B,eAA7B,CAAhD,CAArB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAqEU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,eAAe,MAAf,CAAsB;AACrB,WAAO;AACN,oBAAe;AACd,aAAO;AACN,kBAAW;AADL;AADO,MADT;AAMN,oBAAe;AANT;AADc,IAAtB,CAFY,CAAb;;AAcA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,wEAAV,CAAN;;;;AAID,QAAK,aAAL,GAAqB,kCAAwB,EAAE,QAAQ,KAAK,MAAL,CAAY,aAAtB,EAAxB,CAArB;AACA,QAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,aAAjC;;AAEA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,KAAK,aAAL,CAAmB,QAAnB,EADM,EAEN,KAAK,aAFC;AADoB,IAApB,CAAR;;AAOA;;;;;;;;;2BAOD;AACC,UAAO;AACN,mBAAe,KAAK,aAAL,CAAmB,MAAnB,EADT;AAEN,mBAAe,KAAK,aAAL,CAAmB,MAAnB;AAFT,IAAP;AAIA;;;;;gCApHoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,eAAL;AACC,YAAO,mCAAP;AACD,SAAK,eAAL;AACC,YAAO,IAAI,OAAO,WAAX,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,oDAA2D,UAA3D,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,eAAL;AACC,YAAS,YAAY,WAAZ,KAA4B,EAA7B,IAAsC,qBAAqB,WAAtB,KAAuC,KAApF;AACD,SAAK,eAAL;AACC,YAAQ,YAAY,OAAZ,CAAoB,eAAe,aAAf,CAA6B,UAA7B,CAApB,MAAkE,CAA1E;AACD;AACC,WAAM,IAAI,KAAJ,oDAA2D,UAA3D,CAAN;AAPF;AASA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;AAWC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,UAAO,MAAM,SAAN,IAAmB,EADC;AAE3B,WAAO,CACN,8BAAoB,MAApB,CAA2B,MAAM,aAAN,IAAuB,EAAlD,CADM,EAEN,IAAI,OAAO,WAAX,CAAuB,EAAE,MAAO,MAAM,aAAN,IAAuB,EAAhC,EAAvB,CAFM;AAFoB,IAApB,CAAR;AAOA;;;;;;;;kBA1FmB,c","file":"MessageImprint.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\n//**************************************************************************************\r\nexport default class MessageImprint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MessageImprint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", MessageImprint.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description hashedMessage\r\n\t\t */\r\n\t\tthis.hashedMessage = getParametersValue(parameters, \"hashedMessage\", MessageImprint.defaultValues(\"hashedMessage\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//MessageImprint ::= SEQUENCE  {\r\n\t\t//    hashAlgorithm                AlgorithmIdentifier,\r\n\t\t//    hashedMessage                OCTET STRING  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashedMessage]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.hashedMessage || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMessageImprint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\thashedMessage: \"hashedMessage\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MessageImprint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.hashedMessage = asn1.result.hashedMessage;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.hashedMessage\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\thashedMessage: this.hashedMessage.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
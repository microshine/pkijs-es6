{"version":3,"sources":["../src/KEKIdentifier.js"],"names":[],"mappings":"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","file":"KEKIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute\";\r\n//**************************************************************************************\r\nexport default class KEKIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description keyIdentifier\r\n\t\t */\r\n\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", KEKIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @description date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", KEKIdentifier.defaultValues(\"date\"));\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @description other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", KEKIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKIdentifier.defaultValues(\"keyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\r\n\t\t\t\t\t\t((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KEKIdentifier ::= SEQUENCE {\r\n\t\t//    keyIdentifier OCTET STRING,\r\n\t\t//    date GeneralizedTime OPTIONAL,\r\n\t\t//    other OtherKeyAttribute OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [date]\r\n\t\t * @property {string} [other]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.keyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyIdentifier = asn1.result.keyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.keyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyIdentifier: this.keyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/DigestInfo.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,U;;;;;;;;AAQpB,uBACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,eAAL,GAAuB,iCAAmB,UAAnB,EAA+B,iBAA/B,EAAkD,WAAW,aAAX,CAAyB,iBAAzB,CAAlD,CAAvB;;;;;AAKA,OAAK,MAAL,GAAc,iCAAmB,UAAnB,EAA+B,QAA/B,EAAyC,WAAW,aAAX,CAAyB,QAAzB,CAAzC,CAAd;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BA6EU,M,EACX;;AAEO,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACT,MADS,EAET,WAAW,MAAX,CAAkB;AACd,WAAO;AACH,sBAAiB;AACb,aAAO;AACH,kBAAW;AADR;AADM,MADd;AAMH,aAAQ;AANL;AADO,IAAlB,CAFS,CAAb;;AAcA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACI,MAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;;;;AAIJ,QAAK,eAAL,GAAuB,kCAAwB,EAAE,QAAQ,KAAK,MAAL,CAAY,eAAtB,EAAxB,CAAvB;AACA,QAAK,MAAL,GAAc,KAAK,MAAL,CAAY,MAA1B;;AAEN;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,QAAX,CAAoB;AAC3B,WAAO,CACN,KAAK,eAAL,CAAqB,QAArB,EADM,EAEN,KAAK,MAFC;AADoB,IAApB,CAAR;;AAOA;;;;;;;;;2BAOD;AACC,UAAO;AACN,qBAAiB,KAAK,eAAL,CAAqB,MAArB,EADX;AAEN,YAAQ,KAAK,MAAL,CAAY,MAAZ;AAFF,IAAP;AAIA;;;;;gCA5HoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,iBAAL;AACC,YAAO,mCAAP;AACD,SAAK,QAAL;AACC,YAAO,IAAI,OAAO,WAAX,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,gDAAuD,UAAvD,CAAN;AAPF;AASA;;;;;;;;;;qCAOyB,U,EAAY,W,EACtC;AACC,WAAO,UAAP;AAEC,SAAK,iBAAL;AACC,YAAS,8BAAoB,kBAApB,CAAuC,aAAvC,EAAsD,YAAY,WAAlE,CAAD,IACN,qBAAqB,WAAtB,KAAuC,KADxC;AAED,SAAK,QAAL;AACC,YAAQ,YAAY,OAAZ,CAAoB,KAAK,WAAL,CAAiB,aAAjB,CAA+B,UAA/B,CAApB,CAAR;AACD;AACC,WAAM,IAAI,KAAJ,gDAAuD,UAAvD,CAAN;AARF;AAUA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;;;AAcC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEM,UAAQ,IAAI,OAAO,QAAX,CAAoB;AACxB,UAAO,MAAM,SAAN,IAAmB,EADF;AAExB,WAAO,CACH,8BAAoB,MAApB,CAA2B,MAAM,eAAN,IAAyB;AAChD,YAAO;AACH,iBAAW;AADR;AADyC,KAApD,CADG,EAMH,IAAI,OAAO,WAAX,CAAuB,EAAE,MAAO,MAAM,MAAN,IAAgB,QAAzB,EAAvB,CANG;AAFiB,IAApB,CAAR;AAWN;;;;;;;;kBAlGmB,U","file":"DigestInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\n//**************************************************************************************\r\nexport default class DigestInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", DigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description digest\r\n\t\t */\r\n\t\tthis.digest = getParametersValue(parameters, \"digest\", DigestInfo.defaultValues(\"digest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn (memberValue.isEqual(this.constructor.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n        //DigestInfo ::= SEQUENCE {\r\n        //    digestAlgorithm DigestAlgorithmIdentifier,\r\n        //    digest Digest }\r\n\r\n        //Digest ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || \"\"),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n                    names: {\r\n                        blockName: \"digestAlgorithm\"\r\n                    }\r\n                }),\r\n                new asn1js.OctetString({ name: (names.digest || \"digest\") })\r\n            ]\r\n        }));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n        //region Check the schema is valid \r\n        const asn1 = asn1js.compareSchema(schema,\r\n            schema,\r\n            DigestInfo.schema({\r\n                names: {\r\n                    digestAlgorithm: {\r\n                        names: {\r\n                            blockName: \"digestAlgorithm\"\r\n                        }\r\n                    },\r\n                    digest: \"digest\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for DigestInfo\");\r\n        //endregion \r\n\r\n        //region Get internal properties from parsed schema \r\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n        this.digest = asn1.result.digest;\r\n        //endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.digestAlgorithm.toSchema(),\r\n\t\t\t\tthis.digest\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdigestAlgorithm: this.digestAlgorithm.toJSON(),\r\n\t\t\tdigest: this.digest.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
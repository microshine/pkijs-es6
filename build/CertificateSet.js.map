{"version":3,"sources":["../src/CertificateSet.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,M;;AACZ;;AACA;;;;;;;;;;;;IAEqB,c;;;;;;;;AAQpB,2BACA;AAAA,MADY,UACZ,yDADyB,EACzB;;AAAA;;;;;;;AAMC,OAAK,YAAL,GAAoB,iCAAmB,UAAnB,EAA+B,cAA/B,EAA+C,eAAe,aAAf,CAA6B,cAA7B,CAA/C,CAApB;;;;AAIA,MAAG,YAAY,UAAf,EACC,KAAK,UAAL,CAAgB,WAAW,MAA3B;;AAED;;;;;;;;;;;;;;;;6BAwFU,M,EACX;;AAEC,OAAM,OAAO,OAAO,aAAP,CAAqB,MAArB,EACZ,MADY,EAEZ,eAAe,MAAf,EAFY,CAAb;;AAKA,OAAG,KAAK,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI,KAAJ,CAAU,6EAAV,CAAN;;;;AAID,QAAK,YAAL,GAAoB,MAAM,IAAN,CAAW,KAAK,MAAL,CAAY,YAAvB,EAAqC,mBAAW;AACnE,QAAG,QAAQ,OAAR,CAAgB,QAAhB,KAA6B,CAAhC,EACC,OAAO,0BAAgB,EAAE,QAAQ,OAAV,EAAhB,CAAP;;AAED,WAAO,OAAP;AACA,IALmB,CAApB;;AAOA;;;;;;;;;6BAOD;;AAEC,UAAQ,IAAI,OAAO,GAAX,CAAe;AACtB,WAAO,MAAM,IAAN,CAAW,KAAK,YAAhB,EAA8B,mBAAW;AAC/C,SAAG,wCAAH,EACC,OAAO,QAAQ,QAAR,EAAP;;AAED,YAAO,OAAP;AACA,KALM;AADe,IAAf,CAAR;;AASA;;;;;;;;;2BAOD;AACC,UAAO;AACN,kBAAc,MAAM,IAAN,CAAW,KAAK,YAAhB,EAA8B;AAAA,YAAW,QAAQ,MAAR,EAAX;AAAA,KAA9B;AADR,IAAP;AAGA;;;;;gCAnIoB,U,EACrB;AACC,WAAO,UAAP;AAEC,SAAK,cAAL;AACC,YAAO,EAAP;AACD;AACC,WAAM,IAAI,KAAJ,+CAAsD,UAAtD,CAAN;AALF;AAOA;;;;;;;;;;2BAQD;AAAA,OADc,UACd,yDAD2B,EAC3B;;;;;;;;;;;;;;;AAcC,OAAM,QAAQ,iCAAmB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,UACC,IAAI,OAAO,GAAX,CAAe;AACd,UAAO,MAAM,SAAN,IAAmB,EADZ;AAEd,WAAO,CACN,IAAI,OAAO,QAAX,CAAoB;AACnB,WAAO,MAAM,YAAN,IAAsB,EADV;AAEnB,YAAO,IAAI,OAAO,MAAX,CAAkB;AACxB,aAAO,CACN,sBAAY,MAAZ,EADM,EAEN,IAAI,OAAO,WAAX,CAAuB;AACtB,gBAAS;AACR,kBAAU,CADF,E;AAER,mBAAW,C;AAFH,QADa;AAKtB,cAAO,CACN,IAAI,OAAO,GAAX,EADM;AALe,OAAvB,CAFM,E;AAWN,UAAI,OAAO,WAAX,CAAuB;AACtB,gBAAS;AACR,kBAAU,CADF,E;AAER,mBAAW,C;AAFH,QADa;AAKtB,cAAO,CACN,IAAI,OAAO,GAAX,EADM;AALe,OAAvB,CAXM,E;AAoBN,UAAI,OAAO,WAAX,CAAuB;AACtB,gBAAS;AACR,kBAAU,CADF,E;AAER,mBAAW,C;AAFH,QADa;AAKtB,cAAO,CACN,IAAI,OAAO,gBAAX,EADM,EAEN,IAAI,OAAO,GAAX,EAFM;AALe,OAAvB,CApBM;AADiB,MAAlB;AAFY,KAApB,CADM;AAFO,IAAf,CADD,C;AA2CA;;;;;;;;kBAxGmB,c","file":"CertificateSet.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Certificate from \"./Certificate\";\r\n//**************************************************************************************\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateSet ::= SET OF CertificateChoices\r\n\t\t//\r\n\t\t//CertificateChoices ::= CHOICE {\r\n\t\t//    certificate Certificate,\r\n\t\t//    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t\t//    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t\t//    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t\t//    other [3] IMPLICIT OtherCertificateFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t); // TODO: add definition for \"AttributeCertificateV2\"\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_CERTIFICATE_SET\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element => {\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element => {\r\n\t\t\t\tif(element instanceof Certificate)\r\n\t\t\t\t\treturn element.toSchema();\r\n\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/common.js"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\nimport CryptoEngine from \"./CryptoEngine\";\r\n//**************************************************************************************\r\n//region Crypto engine related function\r\n//**************************************************************************************\r\nlet engine = {\r\n\tname: \"none\",\r\n\tcrypto: null,\r\n\tsubtle: null\r\n};\r\n//**************************************************************************************\r\nexport function setEngine(name, crypto, subtle)\r\n{\r\n\tengine = {\r\n\t\tname,\r\n\t\tcrypto,\r\n\t\tsubtle\r\n\t};\r\n}\r\n//**************************************************************************************\r\nexport function getEngine()\r\n{\r\n\treturn engine;\r\n}\r\n//**************************************************************************************\r\n(function initCryptoEngine()\r\n{\r\n\tif(typeof self !== \"undefined\")\r\n\t{\r\n\t\tif(\"crypto\" in self)\r\n\t\t{\r\n\t\t\tlet engineName = \"webcrypto\";\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Standard crypto object\r\n\t\t\t * @type {Object}\r\n\t\t\t * @property {Object} [webkitSubtle] Subtle object from Apple\r\n\t\t\t */\r\n\t\t\tconst cryptoObject = self.crypto;\r\n\t\t\tlet subtleObject = null;\r\n\r\n\t\t\t// Apple Safari support\r\n\t\t\tif(\"webkitSubtle\" in self.crypto)\r\n\t\t\t{\r\n\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\r\n\t\t\t\tengineName = \"safari\";\r\n\t\t\t}\r\n\r\n\t\t\tif(\"subtle\" in self.crypto)\r\n\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\r\n\t\t\tengine = {\r\n\t\t\t\tname: engineName,\r\n\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\tsubtle: new CryptoEngine({ name: engineName, crypto: subtleObject })\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n)();\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of common functions\r\n//**************************************************************************************\r\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\r\nexport function getCrypto()\r\n{\r\n\tif(engine.subtle !== null)\r\n\t\treturn engine.subtle;\r\n\r\n\treturn undefined;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\r\nexport function getRandomValues(view)\r\n{\r\n\tif(engine.crypto !== null)\r\n\t\treturn engine.crypto.getRandomValues(view);\r\n\r\n\tthrow new Error(\"No support for Web Cryptography API\");\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get OID for each specific WebCrypto algorithm\r\n * @param {Object} algorithm WebCrypto algorithm\r\n * @returns {string}\r\n */\r\nexport function getOIDByAlgorithm(algorithm)\r\n{\r\n\tlet result = \"\";\r\n\r\n\tswitch(algorithm.name.toUpperCase())\r\n\t{\r\n\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"RSA-PSS\":\r\n\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\tbreak;\r\n\t\tcase \"RSA-OAEP\":\r\n\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\tbreak;\r\n\t\tcase \"ECDSA\":\r\n\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"ECDH\":\r\n\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t{\r\n\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CTR\":\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CBC\":\r\n\t\t\tswitch(algorithm.length)\r\n\t\t\t{\r\n\t\t\t\tcase 128:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 192:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 256:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CMAC\":\r\n\t\t\tbreak;\r\n\t\tcase \"AES-GCM\":\r\n\t\t\tswitch(algorithm.length)\r\n\t\t\t{\r\n\t\t\t\tcase 128:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 192:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 256:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CFB\":\r\n\t\t\tswitch(algorithm.length)\r\n\t\t\t{\r\n\t\t\t\tcase 128:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 192:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 256:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-KW\":\r\n\t\t\tswitch(algorithm.length)\r\n\t\t\t{\r\n\t\t\t\tcase 128:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 192:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 256:\r\n\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"HMAC\":\r\n\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"DH\":\r\n\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-1\":\r\n\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\tbreak;\r\n\t\tcase \"CONCAT\":\r\n\t\t\tbreak;\r\n\t\tcase \"HKDF\":\r\n\t\t\tbreak;\r\n\t\tcase \"PBKDF2\":\r\n\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\tbreak;\r\n\t\t//region Special case - OIDs for ECC curves\r\n\t\tcase \"P-256\":\r\n\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\tbreak;\r\n\t\tcase \"P-384\":\r\n\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\tbreak;\r\n\t\tcase \"P-521\":\r\n\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\tbreak;\r\n\t\t//endregion\r\n\t\tdefault:\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\r\nexport function getAlgorithmParameters(algorithmName, operation)\r\n{\r\n\tlet result = {\r\n\t\talgorithm: {},\r\n\t\tusages: []\r\n\t};\r\n\r\n\tswitch(algorithmName.toUpperCase())\r\n\t{\r\n\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"verify\":\r\n\t\t\t\tcase \"sign\":\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"RSA-PSS\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"sign\":\r\n\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"RSA-OAEP\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"encrypt\":\r\n\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"ECDSA\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"verify\":\r\n\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"ECDH\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"derivekey\":\r\n\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CTR\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"decrypt\":\r\n\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-CBC\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"decrypt\":\r\n\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\tiv: getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-GCM\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"decrypt\":\r\n\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\tiv: getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"AES-KW\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"HMAC\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"sign\":\r\n\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"importkey\":\r\n\t\t\t\tcase \"exportkey\":\r\n\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"HKDF\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"PBKDF2\":\r\n\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tresult = {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\titerations: 1000\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createCMSECDSASignature(signatureBuffer)\r\n{\r\n\t// #region Initial check for correct length \r\n\tif((signatureBuffer.byteLength % 2) !== 0)\r\n\t\treturn new ArrayBuffer(0);\r\n\t// #endregion \r\n\t\r\n\t// #region Initial variables \r\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\t\r\n\tconst rBuffer = new ArrayBuffer(length);\r\n\tconst rView = new Uint8Array(rBuffer);\r\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\r\n\tlet rCorrectedBuffer;\r\n\tlet rCorrectedView;\r\n\t\r\n\tconst sBuffer = new ArrayBuffer(length);\r\n\tconst sView = new Uint8Array(sBuffer);\r\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\r\n\tlet sCorrectedBuffer;\r\n\tlet sCorrectedView;\r\n\t// #endregion   \r\n\t\r\n\t// #region Get \"r\" part of ECDSA signature \r\n\tswitch(true)\r\n\t{\r\n\t\tcase ((rView[0] & 0x80) !== 0):\r\n\t\t\trCorrectedBuffer = new ArrayBuffer(length + 1);\r\n\t\t\trCorrectedView = new Uint8Array(rCorrectedBuffer);\r\n\t\t\t\r\n\t\t\trCorrectedView[0] = 0x00;\r\n\t\t\t\r\n\t\t\trCorrectedView.set(rView, 1);\r\n\t\t\tbreak;\r\n\t\tcase ((rView[0] === 0x00) && ((rView[1] & 0x80) === 0)):\r\n\t\t\trCorrectedBuffer = new ArrayBuffer(length - 1);\r\n\t\t\trCorrectedView = new Uint8Array(rCorrectedBuffer);\r\n\t\t\t\r\n\t\t\trCorrectedView.set(new Uint8Array(signatureBuffer, 1, length - 1));\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\trCorrectedBuffer = rBuffer;\r\n\t\t\trCorrectedView = rView;\r\n\t}\r\n\t// #endregion   \r\n\t\r\n\t// #region Get \"s\" part of ECDSA signature \r\n\tswitch(true)\r\n\t{\r\n\t\tcase ((sView[0] & 0x80) !== 0):\r\n\t\t\tsCorrectedBuffer = new ArrayBuffer(length + 1);\r\n\t\t\tsCorrectedView = new Uint8Array(sCorrectedBuffer);\r\n\t\t\t\r\n\t\t\tsCorrectedView[0] = 0x00;\r\n\t\t\t\r\n\t\t\tsCorrectedView.set(sView, 1);\r\n\t\t\tbreak;\r\n\t\tcase ((sView[0] === 0x00) && ((sView[1] & 0x80) === 0)):\r\n\t\t\tsCorrectedBuffer = new ArrayBuffer(length - 1);\r\n\t\t\tsCorrectedView = new Uint8Array(sCorrectedBuffer);\r\n\t\t\t\r\n\t\t\tsCorrectedView.set(new Uint8Array(signatureBuffer, 1, length - 1));\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tsCorrectedBuffer = sBuffer;\r\n\t\t\tsCorrectedView = sView;\r\n\t}\r\n\t// #endregion   \r\n\t\r\n\t// #region Create ASN.1 structure of CMS ECDSA signature \r\n\tconst rInteger = new asn1js.Integer();\r\n\trInteger.valueBlock.isHexOnly = true;\r\n\trInteger.valueBlock.valueHex = rCorrectedBuffer.slice();\r\n\t\r\n\tconst sInteger = new asn1js.Integer();\r\n\tsInteger.valueBlock.isHexOnly = true;\r\n\tsInteger.valueBlock.valueHex = sCorrectedBuffer.slice();\r\n\t// #endregion\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tvalue: [\r\n\t\t\trInteger,\r\n\t\t\tsInteger\r\n\t\t]\r\n\t})).toBER(false);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\r\nexport function stringPrep(inputString)\r\n{\r\n\tlet result = inputString.replace(/^\\s+|\\s+$/g, \"\"); // Trim input string\r\n\tresult = result.replace(/\\s+/g, \" \"); // Change all sequence of SPACE down to SPACE char\r\n\tresult = result.toLowerCase();\r\n\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createECDSASignatureFromCMS(cmsSignature)\r\n{\r\n\t// #region Check input variables\r\n\tif((cmsSignature instanceof asn1js.Sequence) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif(cmsSignature.valueBlock.value.length !== 2)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[0] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[1] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t// #endregion \r\n\t\r\n\t// #region Aux functions \r\n\tfunction transformInteger(integer)\r\n\t{\r\n\t\tconst view = new Uint8Array(integer.valueBlock.valueHex);\r\n\t\t\r\n\t\tswitch(integer.valueBlock.valueHex.byteLength)\r\n\t\t{\r\n\t\t\tcase 32:\r\n\t\t\tcase 48:\r\n\t\t\tcase 66:\r\n\t\t\t\treturn integer.valueBlock.valueHex;\r\n\t\t\tcase 33:\r\n\t\t\tcase 49:\r\n\t\t\tcase 67:\r\n\t\t\t\treturn (view.slice(1)).buffer;\r\n\t\t\tcase 31:\r\n\t\t\tcase 47:\r\n\t\t\tcase 65:\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedBuffer = new ArrayBuffer(integer.valueBlock.valueHex.byteLength + 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedBuffer);\r\n\r\n\t\t\t\t\tupdatedView.set(view, 1);\r\n\r\n\t\t\t\t\treturn updatedBuffer;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t}\r\n\t}\r\n\t// #endregion \r\n\t\r\n\tconst rBuffer = transformInteger(cmsSignature.valueBlock.value[0]);\r\n\tconst sBuffer = transformInteger(cmsSignature.valueBlock.value[1]);\r\n\t\r\n\treturn utilConcatBuf(rBuffer, sBuffer);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid Wel-known OID to search for\r\n * @returns {Object}\r\n */\r\nexport function getAlgorithmByOID(oid)\r\n{\r\n\tswitch(oid)\r\n\t{\r\n\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t};\r\n\t\tcase \"1.2.840.10045.2.1\":\r\n\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t};\r\n\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t};\r\n\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t};\r\n\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\tlength: 128\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\tlength: 192\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\tlength: 128\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\tlength: 192\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\tlength: 128\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\tlength: 192\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 128\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 192\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"HMAC\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"HMAC\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"HMAC\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"HMAC\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"DH\"\r\n\t\t\t};\r\n\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"SHA-1\"\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"SHA-256\"\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"SHA-384\"\r\n\t\t\t};\r\n\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"SHA-512\"\r\n\t\t\t};\r\n\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t};\r\n\t\t//region Special case - OIDs for ECC curves\r\n\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"P-256\"\r\n\t\t\t};\r\n\t\tcase \"1.3.132.0.34\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"P-384\"\r\n\t\t\t};\r\n\t\tcase \"1.3.132.0.35\":\r\n\t\t\treturn {\r\n\t\t\t\tname: \"P-521\"\r\n\t\t\t};\r\n\t\t//endregion\r\n\t\tdefault:\r\n\t}\r\n\r\n\treturn {};\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\r\nexport function getHashAlgorithm(signatureAlgorithm)\r\n{\r\n\tlet result = \"\";\r\n\r\n\tswitch(signatureAlgorithm.algorithmId)\r\n\t{\r\n\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\tresult = \"SHA-1\";\r\n\t\t\tbreak;\r\n\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\tresult = \"SHA-256\";\r\n\t\t\tbreak;\r\n\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\tresult = \"SHA-384\";\r\n\t\t\tbreak;\r\n\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\tresult = \"SHA-512\";\r\n\t\t\tbreak;\r\n\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst algorithm = getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\treturn \"\";\r\n\r\n\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex) {}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo)\r\n{\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\tcase \"SHA-256\":\r\n\t\tcase \"SHA-384\":\r\n\t\tcase \"SHA-512\":\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\r\n\tif(Counter > 255)\r\n\t\treturn Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\r\n\t//endregion\r\n\r\n\t//region Initial variables\r\n\tconst counterBuffer = new ArrayBuffer(4);\r\n\tconst counterView = new Uint8Array(counterBuffer);\r\n\tcounterView[0] = 0x00;\r\n\tcounterView[1] = 0x00;\r\n\tcounterView[2] = 0x00;\r\n\tcounterView[3] = Counter;\r\n\r\n\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t//endregion\r\n\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\r\n\t//region Create a combined ArrayBuffer for digesting\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);\r\n\t//endregion\r\n\r\n\t//region Return digest of combined ArrayBuffer and information about current counter\r\n\treturn crypto.digest({\r\n\t\tname: hashFunction\r\n\t},\r\n\tcombinedBuffer).then(result => {\r\n\t\treturn {\r\n\t\t\tcounter: Counter,\r\n\t\t\tresult\r\n\t\t};\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo)\r\n{\r\n\t//region Initial variables\r\n\tlet hashLength = 0;\r\n\tlet maxCounter = 1;\r\n\t\r\n\tconst kdfArray = [];\r\n\t//endregion\r\n\t\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\thashLength = 160; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\thashLength = 256; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\thashLength = 384; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\thashLength = 512; // In bits\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t//endregion\r\n\t\r\n\t//region Calculated maximum value of \"Counter\" variable\r\n\tconst quotient = keydatalen / hashLength;\r\n\t\r\n\tif(Math.floor(quotient) > 0)\r\n\t{\r\n\t\tmaxCounter = Math.floor(quotient);\r\n\t\t\r\n\t\tif((quotient - maxCounter) > 0)\r\n\t\t\tmaxCounter++;\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Create an array of \"kdfWithCounter\"\r\n\tfor(let i = 1; i <= maxCounter; i++)\r\n\t\tkdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\r\n\t//endregion\r\n\t\r\n\t//region Return combined digest with specified length\r\n\treturn Promise.all(kdfArray).\r\n\tthen(incomingResult => {\r\n\t\t//region Initial variables\r\n\t\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t\tlet currentCounter = 1;\r\n\t\tlet found = true;\r\n\t\t//endregion\r\n\r\n\t\t//region Combine all buffer together\r\n\t\twhile(found)\r\n\t\t{\r\n\t\t\tfound = false;\r\n\r\n\t\t\tfor(const result of incomingResult)\r\n\t\t\t{\r\n\t\t\t\tif(result.counter === currentCounter)\r\n\t\t\t\t{\r\n\t\t\t\t\tcombinedBuffer = utilConcatBuf(combinedBuffer, result.result);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcurrentCounter++;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create output buffer with specified length\r\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\r\n\r\n\t\tif(combinedBuffer.byteLength > keydatalen)\r\n\t\t{\r\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\r\n\t\t\tconst newView = new Uint8Array(newBuffer);\r\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\r\n\r\n\t\t\tfor(let i = 0; i < keydatalen; i++)\r\n\t\t\t\tnewView[i] = combinedView[i];\r\n\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\r\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\r\n\t\t//endregion\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n"]}
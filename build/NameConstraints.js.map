{"version":3,"sources":["../src/NameConstraints.js"],"names":[],"mappings":"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","file":"NameConstraints.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport GeneralSubtree from \"./GeneralSubtree\";\r\n//**************************************************************************************\r\nexport default class NameConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NameConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"permittedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @description permittedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\r\n\r\n\t\tif(\"excludedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @description excludedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"permittedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"excludedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// NameConstraints OID ::= 2.5.29.30\r\n\t\t//\r\n\t\t//NameConstraints ::= SEQUENCE {\r\n\t\t//    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n\t\t//    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [permittedSubtrees]\r\n\t\t * @property {string} [excludedSubtrees]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNameConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\r\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"permittedSubtrees\" in asn1.result)\r\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\r\n\t\tif(\"excludedSubtrees\" in asn1.result)\r\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\r\n\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
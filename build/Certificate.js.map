{"version":3,"sources":["../src/Certificate.js"],"names":[],"mappings":"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","file":"Certificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes } from \"pvutils\";\r\nimport { getCrypto, getHashAlgorithm, getAlgorithmByOID, createCMSECDSASignature, createECDSASignatureFromCMS, getAlgorithmParameters, getOIDByAlgorithm } from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\nimport Time from \"./Time\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo\";\r\nimport Extension from \"./Extension\";\r\nimport Extensions from \"./Extensions\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notBefore\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notAfter\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description subjectUniqueID\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Certificate  ::=  SEQUENCE  {\r\n\t\t//    tbsCertificate       TBSCertificate,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signatureValue       BIT STRING  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CERT\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.extensions.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Find correct algorithm for imported public key\r\n\t\tif(parameters === null)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tparameters = {};\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Find signer's hashing algorithm\r\n\t\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(this.subjectPublicKeyInfo.algorithm.algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${this.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get neccessary values from internal fields for current certificate\r\n\t\tconst publicKeyInfoSchema = this.subjectPublicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t//endregion\r\n\r\n\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get SHA-1 hash value for subject public key\r\n\t */\r\n\tgetKeyHash()\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\treturn crypto.digest({ name: \"sha-1\" }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get hashing algorithm\r\n\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst defParams = getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tdefParams.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tthis.signature.algorithmId = getOIDByAlgorithm(defParams.algorithm);\r\n\t\t\t\tthis.signatureAlgorithm.algorithmId = this.signature.algorithmId;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tdefParams.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(defParams.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tthis.signature = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.10\",\r\n\t\t\t\t\t\talgorithmParams: pssParameters.toSchema()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.signatureAlgorithm = this.signature; // Must be the same\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create TBS data for signing\r\n\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Signing TBS data on provided private key\r\n\t\treturn crypto.sign(defParams.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(this.tbs)).then(result => {\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(defParams.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t\t}, error => Promise.reject(`Signing error: ${error}`));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\r\n\t\tconst signature = this.signatureValue;\r\n\t\tconst tbs = this.tbs;\r\n\t\t//endregion\r\n\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = getHashAlgorithm(this.signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Importing public key\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(this.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = this.signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = subjectPublicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${algorithmId}`);\r\n\r\n\t\t\tconst algorithm = getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst publicKeyInfoSchema = subjectPublicKeyInfo.toSchema();\r\n\t\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\r\n\t\t\treturn crypto.importKey(\"spki\", publicKeyInfoView, algorithm.algorithm, true, algorithm.usages);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Verify signature for the certificate\r\n\t\tsequence = sequence.then(publicKey => {\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: this.signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(tbs)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
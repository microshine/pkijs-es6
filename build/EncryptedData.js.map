{"version":3,"sources":["../src/EncryptedData.js"],"names":[],"mappings":"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","file":"EncryptedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport { getCrypto, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo\";\r\nimport Attribute from \"./Attribute\";\r\nimport PBKDF2Params from \"./PBKDF2Params\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport PBES2Params from \"./PBES2Params\";\r\n//**************************************************************************************\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @description encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\r\n\t\t//    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }\r\n\r\n\t\t//EncryptedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    encryptedContentInfo EncryptedContentInfo,\r\n\t\t//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_ENCRYPTED_DATA\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\r\n\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\r\n\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \\\"hmacHashAlgorithm\\\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tgetRandomValues(saltView);\r\n\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\r\n\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tcrypto.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\ttrue,\r\n\t\t\t[\"encrypt\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tcrypto.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Store all parameters in CMS_ENCRYPTED_DATA\r\n\t\tsequence = sequence.then(result => {\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \\\"contentEncryptionAlgorithm\\\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \\\"contentEncryptionAlgorithm\\\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer \r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\" \r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tcrypto.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\ttrue,\r\n\t\t\t[\"decrypt\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal content using derived key \r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/CRLBag.js"],"names":[],"mappings":"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","file":"CRLBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList\";\r\n//**************************************************************************************\r\nexport default class CRLBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description crlId\r\n\t\t */\r\n\t\tthis.crlId = getParametersValue(parameters, \"crlId\", CRLBag.defaultValues(\"crlId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description crlValue\r\n\t\t */\r\n\t\tthis.crlValue = getParametersValue(parameters, \"crlValue\", CRLBag.defaultValues(\"crlValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CRLBag.defaultValues(\"parsedValue\"));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CRLBag ::= SEQUENCE {\r\n\t\t//    crlId     \tBAG-TYPE.&id ({CRLTypes}),\r\n\t\t//    crlValue \t[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"crlId\",\r\n\t\t\t\t\tvalue: \"crlValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crlId = asn1.result.crlId.valueBlock.toString();\r\n\t\tthis.crlValue = asn1.result.crlValue;\r\n\t\t\r\n\t\tswitch(this.crlId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.23.1\": // x509CRL\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\tthis.parsedValue = new CertificateRevocationList({ schema: asn1.result });\r\n\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Incorrect \\\"crlId\\\" value in CertBag: \" + this.crlId);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tthis.certId = \"1.2.840.113549.1.9.23.1\";\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.crlId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.crlValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrlId: this.crlId,\r\n\t\t\tcrlValue: this.crlValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
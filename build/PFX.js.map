{"version":3,"sources":["../src/PFX.js"],"names":[],"mappings":"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","file":"PFX.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport { getCrypto, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common\";\r\nimport ContentInfo from \"./ContentInfo\";\r\nimport MacData from \"./MacData\";\r\nimport DigestInfo from \"./DigestInfo\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport SignedData from \"./SignedData\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo\";\r\nimport Attribute from \"./Attribute\";\r\nimport SignerInfo from \"./SignerInfo\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe\";\r\n//**************************************************************************************\r\nexport default class PFX\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @description authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @description macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PFX ::= SEQUENCE {\r\n\t\t//    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t\t//    authSafe\tContentInfo,\r\n\t\t//    macData    \tMacData OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) == false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) == false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) == false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet length;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Choose correct length for HMAC key\r\n\t\t\t\t\tswitch(parameters.hmacHashAlgorithm.toLowerCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"sha-1\":\r\n\t\t\t\t\t\t\tlength = 160;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"sha-256\":\r\n\t\t\t\t\t\t\tlength = 256;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"sha-384\":\r\n\t\t\t\t\t\t\tlength = 384;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"sha-512\":\r\n\t\t\t\t\t\t\tlength = 512;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect \\\"parameters.hmacHashAlgorithm\\\" parameter: ${parameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet hmacAlgorithm = {\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\tlength: length,\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Generate HMAC key using PBKDF2\r\n\t\t\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tlet passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t\t['deriveKey']);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Derive key for HMAC\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult => crypto.deriveKey({\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: parameters.pbkdf2HashAlgorithm\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t['sign']),\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make final \"MacData\" value\r\n\t\t\t\t\t//region Make signed HMAC value\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: this.parsedValue.authenticatedSafe.toSchema().toBER(false) })\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet data = this.authSafe.content.toBER(false);\r\n\t\t\t\t\t\t\tlet view = new Uint8Array(data);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn crypto.sign(hmacAlgorithm, result, view);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult => {\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [ parameters.signingCertificate ]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm} , new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult => {\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \\\"integrityMode\\\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) == false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) == false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(this.authSafe.content.valueBlock.valueHex);\r\n\t\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) == false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS# data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Unsupported digest algorithm: \" + this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet length;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Choose correct length for HMAC key\r\n\t\t\t\t\t\tswitch(hashAlgorithm.name.toLowerCase())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase \"sha-1\":\r\n\t\t\t\t\t\t\t\tlength = 160;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"sha-256\":\r\n\t\t\t\t\t\t\t\tlength = 256;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"sha-384\":\r\n\t\t\t\t\t\t\t\tlength = 384;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"sha-512\":\r\n\t\t\t\t\t\t\t\tlength = 512;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect \\\"hashAlgorithm\\\": ${hashAlgorithm.name}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet hmacAlgorithm = {\r\n\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\tlength: length,\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Generate HMAC key using PBKDF2\r\n\t\t\t\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>{\r\n\t\t\t\t\t\t\t\tlet passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t\t\t['deriveKey']);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Derive key for HMAC\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult => crypto.deriveKey({\r\n\t\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tsalt: new Uint8Array(this.macData.macSalt.valueBlock.valueHex),\r\n\t\t\t\t\t\t\t\t\titerations: this.macData.iterations\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\t\t\t\ttrue,\r\n\t\t\t\t\t\t\t\t['verify']),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>{\r\n\t\t\t\t\t\t\t\tlet data = this.authSafe.content.toBER(false);\r\n\t\t\t\t\t\t\t\tlet view = new Uint8Array(data);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn crypto.verify(hmacAlgorithm,\r\n\t\t\t\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\t\t\t\tnew Uint8Array(this.macData.mac.digest.valueBlock.valueHex),\r\n\t\t\t\t\t\t\t\t\tview);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>{\r\n\t\t\t\t\t\t\t\tif(result == false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tlet cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) == false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed == false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset == (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \\\"this.authSafe.contentType\\\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/EnvelopedData.js"],"names":[],"mappings":"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","file":"EnvelopedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common\";\r\nimport OriginatorInfo from \"./OriginatorInfo\";\r\nimport RecipientInfo from \"./RecipientInfo\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo\";\r\nimport Attribute from \"./Attribute\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo\";\r\nimport KEKIdentifier from \"./KEKIdentifier\";\r\nimport PBKDF2Params from \"./PBKDF2Params\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey\";\r\n//**************************************************************************************\r\nexport default class EnvelopedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @description originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @description recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @description encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//EnvelopedData ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t\t//    recipientInfos RecipientInfos,\r\n\t\t//    encryptedContentInfo EncryptedContentInfo,\r\n\t\t//    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CMS_ENVELOPED_DATA\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tasn1.result.originatorInfo.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tasn1.result.originatorInfo.idBlock.tagNumber = 16; // SEQUENCE\r\n\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({ schema: asn1.result.originatorInfo });\r\n\t\t}\r\n\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\r\n\t\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \\\"variant\\\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \\\"hmacHashAlgorithm\\\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \\\"variant\\\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result => {\r\n\t\t\tsessionKey = result;\r\n\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result => {\r\n\t\t\texportedSessionKey = result;\r\n\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"recipientCertificate\\\" for index ${index}`);\r\n\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\r\n\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\r\n\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\r\n\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \\\"index\\\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\r\n\t\t\tlet curveOID;\r\n\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"recipientCertificate\\\" for index ${index}`);\r\n\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\tecdhPrivateKey = result;\r\n\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\r\n\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\r\n\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\r\n\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\tresult,\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() => {\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \\\"keyEncryptionAlgorithm\\\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() => {\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result => {\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \\\"contentEncryptionAlgorithm\\\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/RelativeDistinguishedNames.js"],"names":[],"mappings":"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","file":"RelativeDistinguishedNames.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue\";\r\n//**************************************************************************************\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @description Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t\t//\r\n\t\t//RelativeDistinguishedName ::=\r\n\t\t//SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\t/**\r\n\t\t * @type {{verified: boolean}|{verified: boolean, result: {RDN: Object, typesAndValues: Array.<Object>}}}\r\n\t\t */\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RDN\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":[],"mappings":"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","file":"AttributeTypeAndValue.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { stringPrep } from \"./common\";\r\n//**************************************************************************************\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AttributeTypeAndValue ::= Sequence {\r\n\t\t//    type     AttributeType,\r\n\t\t//    value    AttributeValue }\r\n\t\t//\r\n\t\t//AttributeType ::= OBJECT IDENTIFIER\r\n\t\t//\r\n\t\t//AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\t/**\r\n\t\t * @type {{verified: boolean}|{verified: boolean, result: {type: Object, typeValue: Object}}}\r\n\t\t */\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ATTR_TYPE_AND_VALUE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof AttributeTypeAndValue)\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(((this.value instanceof asn1js.Utf8String) && (compareTo.value instanceof asn1js.Utf8String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.BmpString) && (compareTo.value instanceof asn1js.BmpString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.UniversalString) && (compareTo.value instanceof asn1js.UniversalString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.NumericString) && (compareTo.value instanceof asn1js.NumericString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.PrintableString) && (compareTo.value instanceof asn1js.PrintableString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.TeletexString) && (compareTo.value instanceof asn1js.TeletexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VideotexString) && (compareTo.value instanceof asn1js.VideotexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.IA5String) && (compareTo.value instanceof asn1js.IA5String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GraphicString) && (compareTo.value instanceof asn1js.GraphicString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VisibleString) && (compareTo.value instanceof asn1js.VisibleString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GeneralString) && (compareTo.value instanceof asn1js.GeneralString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.CharacterString) && (compareTo.value instanceof asn1js.CharacterString)))\r\n\t\t\t{\r\n\t\t\t\tvar value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tvar value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\t\t\t\t\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
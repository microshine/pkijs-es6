{"version":3,"sources":["../src/SignedAndUnsignedAttributes.js"],"names":[],"mappings":"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","file":"SignedAndUnsignedAttributes.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport Attribute from \"./Attribute\";\r\n//**************************************************************************************\r\nexport default class SignedAndUnsignedAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedAndUnsignedAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description encodedValue Need to have it in order to successfully process with signature verification\r\n\t\t */\r\n\t\tthis.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t\t//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\r\n\t\t//SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n\t\t//UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {number} [tagNumber]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedAndUnsignedAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttagNumber: this.type,\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedUnsignedAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.idBlock.tagNumber;\r\n\t\tthis.encodedValue = asn1.result.valueBeforeDecode;\r\n\r\n\t\t//region Change type from \"[0]\" to \"SET\" accordingly to standard\r\n\t\tconst encodedView = new Uint8Array(this.encodedValue);\r\n\t\tencodedView[0] = 0x31;\r\n\t\t//endregion\r\n\r\n\t\tif((\"attributes\" in asn1.result) === false)\r\n\t\t{\r\n\t\t\tif(this.type === 0)\r\n\t\t\t\tthrow new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n\t\t\telse\r\n\t\t\t\treturn; // Not so important in case of \"UnsignedAttributes\"\r\n\t\t}\r\n\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
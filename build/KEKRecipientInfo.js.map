{"version":3,"sources":["../src/KEKRecipientInfo.js"],"names":[],"mappings":"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","file":"KEKRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\n//**************************************************************************************\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @description kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//KEKRecipientInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,  -- always set to 4\r\n\t\t//    kekid KEKIdentifier,\r\n\t\t//    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t\t//    encryptedKey EncryptedKey }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.originator.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/CertID.js"],"names":[],"mappings":"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","file":"CertID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier\";\r\nimport Certificate from \"./Certificate\";\r\n//**************************************************************************************\r\nexport default class CertID\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertID          ::=     SEQUENCE {\r\n\t\t//    hashAlgorithm       AlgorithmIdentifier,\r\n\t\t//    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t\t//    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t\t//    serialNumber        CertificateSerialNumber }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \\\"hashAlgorithm\\\": ${this.hashAlgorithm}`);\r\n\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result => {\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result => {\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
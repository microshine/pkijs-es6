{"version":3,"sources":["../src/TimeStampResp.js"],"names":[],"mappings":"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","file":"TimeStampResp.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo\";\r\nimport ContentInfo from \"./ContentInfo\";\r\nimport SignedData from \"./SignedData\";\r\n//**************************************************************************************\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @description status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @description timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TimeStampResp ::= SEQUENCE  {\r\n\t\t//    status                  PKIStatusInfo,\r\n\t\t//    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSP_RESPONSE\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}
{"version":3,"sources":["../src/RSAPublicKey.js"],"names":[],"mappings":"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","file":"RSAPublicKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64 } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RSAPublicKey ::= Sequence {\r\n\t\t//    modulus           Integer,  -- n\r\n\t\t//    publicExponent    Integer   -- e\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.n, true)).slice(0, 256) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}